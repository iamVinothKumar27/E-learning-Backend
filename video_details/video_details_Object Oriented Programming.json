[
    {
        "video_id": "-HafzawNlUo",
        "title": "OOPS CONCEPTS - JAVA PROGRAMMING",
        "url": "https://www.youtube.com/watch?v=-HafzawNlUo",
        "duration": 1224,
        "transcript": "[Music] hello friends welcome back to our channel so in the previous session we have seen the Java buzzwords so that we call it as a features in this session let us have a look on the whoops concepts so what are the hopes concepts object gas affection and cancellation inheritance polymorphism so this we call as oops concepts now let us see one by one first what is meant by object so an object is defined as a real-world entity so whatever the thing we are seeing in the real world that can be treated as an object so this object is a real good entity and this object consists of so properties and the tasks performed by us perform by this object so whatever the real world entity which is having these properties in the past some tasks to be performed those we call as an object let us take an example human human being is also an entity and it's an also an object so human consists of properties like name the color height and etc so these are the properties so what is lumen can do task one of the past can be done by this would be one the right exactly so these are the tasks can be performed by this human so we can consider this human as it object hope you understood so object is a real world entity which is having the properties and some tasks that get that it can be performed right no what about the class s is a group that objects object follows the object follows so it is a blueprint that an object follows so without the class object is not there so this class consists of L number of objects number of objects consists of number of objects and the object can be defined as instance of a class instance of a class so the base object will follow the prototype defined by this class example let us take a student student in a class student in a classroom so what are the properties so properties all variables you can say them as so properties of the student 1 screen name to get Holdenville and student date of drawing they'd of joy right so this is a gas and all the objects which are defined by this gas should follow this prototype so that for example a student in a class there are n number of students every student can be considered as an object which follows the same for prepare and one of the hostage to be performed by the student read write play right so every student can have three properties rail right in play every student will be having the three company's name roll number and some date of joy so whatever the objects created through this class will follow the same structure but face objects so student consists of a number of objects so student class comes yourself some ABC the name of a student here we see some deal some change so ABC will be having name whole number date of joining name whole temple gate of joy similarly GHI so here the abcdefgh a of the mains name of a student let it be like something sandy and some fish roe remember and they don't work and for every student will follow some properties some rain write and play so these three properties can be done I mean invoked by this legacy and this properties can be applied for BEF and this properties can be done by GHI so I am object is an instance of a class and a class is a blueprint that the object shoof all right so I can consists of n number of objects many number of objects hope you ever saw this object in class because our channel programming completely deals with these two things tasin object for everything we will create a chasm we will create an object so a casts cannot crisis the methods of another gas directly so one can methods cannot be invoked by the another another gas so in order to access the methods of another class one can should create its own object so simply we can say a classes cannot communicate with each other but in order to communicate with each other objects should be read so for every communication objects should be created so if Cassie and Kashmir wants to communicate so here the communication means invoking the methods of one class by another gas so every class is having the methods right so tasks so invoking those methods or tasks from one class to another class is called a communication and this cannot be done between two classes and this can be done only between objects so in order to communicate two classes first the instances should be generated and through those instances though the two classes will be communicated so hope you understood this thing the castle object next abstraction a fraction means showing only essential parts only essential parts and hiding the implementation details this is called abstraction this can be achieved in this Java programming just the best example so if you download an Android application from the Play Store so we mitigated dot the apk file right not apk file or you can download a software so that we can get gone exe file and if you run this exe file we can get the software and we can use the software but here we can't see the packages or our methods or a functions which are used to create this exe file that means all the implementation part is hide you and only the essential part is visible right so this is the best example so similarly if you download an application from Android Play Store you will hear a dot etheta file but you will not get the method sort of packages or any functions which I have written to generate this dot apk file so all the implementation details will be hidden right so this type of applications can be done in Java programming that we call it as an abstraction or a data hiding I hope you understood this abstraction next one so object class instruction now and capsulation encapsulation so this means binding variables and the methods under single entity binding the variables and methods under single entity so see for it understanding will write here so class is having three parts what is the name of a class so this is a case here we will write the variables and here we will write the methods similarly object is also having the name variables and methods sim simply we can say student is a class having the variables name whole number and a date of joining and the methods read/write okay thanks so this is a cache so here we are writing the variables and these are all variables and this we call as methods right these are core variables these are core methods so here we are binding these variables and methods in a single entity we call it as class or object so object is also having the same structure that means one class will be having in whole number character name and similarly the real method right method so one cast consists of variables and the methods right so this is called encapsulation so hope you understood this one next travel to the next concept in radians inheritance so what is between Higgins acquiring the properties of one class to another class acquiring the properties of one class to another class simply with let's say it does parent class and it changes so chain casts will acquire the properties of parent class right changes will be having acquiring the properties of painting class so this week on it has this class or we can call it this change has will be called as day right so an herbal class is a class which is there are from the base class there are yes or you can call this parent as superclass and this change classes sometimes right so acquiring the properties of one cast to another dress so here acquiring the properties of parent class to the changes so this this concept we call it as inheritance so here there are different types of inheritance right so we will have a single inheritance multi-level in evidence hi lyrical ingredients so let us see the basic interaction then we will move on by one by one right so we will see one by one concept in the depth now in this session let us cover the interaction of all these object-oriented concepts so we can have these three types of in hidden single multi-level and character so this is called inheritance concept next coming to the polymorphism so performing the same tasks same task in different ways in different ways that is called as a polymorphism here tasks means a method method so in working the metal in different ways for example if we are having a program or addict of two numbers we can write and simply we can call ahead without any parameters we can call ad with into a comma in to be right so two methods so both will perform the same task but implementation is different here we are not passing any arguments and here we are passing only I mean two arguments right then this type of implementation we call it as a polymer let it be one more example I will explain so I am having the method called drop polygon drop polygon so this drop one hand can be anyone so we can draw circle as I say it's a polygon so we can draw square we can draw rectangle we can draw a triangle right so both all the three are the polygons all the three are polygons so here just I am implementing properly done and that drop polygon can be square rectangular finding that means implementing this task in different ways this is called polymorphism so this can be achieved in Java by eg by every building method overloading method right and method overriding so the conversations we'll see what what is meant by this method overloading and methylome right so with this we can implement thump I thanked by polymorphism and with this one-time polymerase so we can achieve the compiled them our polymorphism by implementing method overloading and we can achieve this runtime polymorphism by implementing method overriding okay so we will see one by one in the further sessions hope you understood the basic concept of this polymorphism right so these are the concepts of object-oriented programming so object casts abstraction encapsulation inheritance and polymorphism so if you are having any doubts regarding this oops concepts feel free to post your thoughts in the comment section so that I will definitely try to clarify all your doubts and if you really understood my sessions share my sessions with your friends and like my sessions and don't forget to subscribe to our Channel thanks for listening thank you very much"
    },
    {
        "video_id": "pTB0EiLXUC8",
        "title": "Object-Oriented Programming, Simplified",
        "url": "https://www.youtube.com/watch?v=pTB0EiLXUC8",
        "duration": 454,
        "transcript": "[Music] a popular interview question concerns the four core concepts in object-oriented programming this concepts are encapsulation abstraction inheritance and polymorphism let's look at each of these concepts before object-oriented programming we had procedure of programming that divided a program into a set of functions so we have data stored in a bunch of variables and functions that operate on the data this style of programming is very simple and straightforward often it's what you learn as part of your first programming subject at a university but as your programs grow it will end up with a bunch of functions that are all over the place you might find yourself copying and pasting lines of code over and over you make a change to one function and then several other functions break that's what we call spaghetti code there is so much interdependence e between all these functions it becomes problematic object-oriented programming came to solve this problem in object-oriented programming we combine a group of related variables and functions into a unit we call that unit an object we refer to these variables as properties and the functions as methods here's an example think of a car a car is an object with properties such as make model and color and methods like start stop and move now you might say what marche we don't have cars in our programs give me a real programming example ok think of the local storage object in your browser's every browser has a local storage object that allows you to store data locally this local storage object has a property like length which returns the number of objects in the storage and metals like set item and remove item so in object-oriented programming we group related variables and functions that operate on them into objects and this is what we call encapsulation let me show you an example of this in action so here we have three variables base salary over time and rate below these we have a function to calculate the wage for an employee we refer to this kind of implementation as procedural so we have variables on one side and functions on the other side they're hard decoupled now let's take a look at the object-oriented way to solve this problem we can have an employee object with three properties a salary over time and rate and a method called get wage now why is this better well first of all look at the get wage function this function has no parameters in contrast in a procedural example our get wage function has three parameters the reason in this implementation we don't have any parameters is because all these parameters are actually modeled as properties of this object all these properties and the get wage function they are highly related so they are part of one unit so one of the symptoms of procedural code is functions with so many parameters when you write code in an object-oriented way your functions end up having fewer and fewer parameters as Uncle Bob says the best functions are those with no parameters the fewer the number of parameters the easier it is to use and maintain that function so that's encapsulation now let's look at abstraction think of a DVD player as an object this DVD player has a complex logic board on the inside and a few buttons on the outside that you interact with you simply press the play button and you don't care what happens on the inside all that complexity is hidden from you this is abstraction in practice we can use the same technique in our objects so we can hide some of the properties and methods from the outside and this gives us a couple of benefits first is that we'll make the interface of those objects simpler using an understanding an object with a few properties and methods is easier than an object with several properties and methods the second benefit is that it helps us reduce the impact of change let's imagine that tomorrow we change these inner or private methods these changes will leak to the outside because we don't have any code that touches these methods outside of their containing object we may delete a method or change its parameters but none of these changes will impact the rest of the applications code so with abstraction we reduce the impact of change now the third core concept in object-oriented programming inheritance inheritance is a mechanism that allows you to eliminate redundant code here's an example think of HTML elements like text boxes drop-down lists checkboxes and so on all these elements have a few things in common they should have properties like hidden and inner HTML and metals like click and focus instead of redefining all these properties and methods for every type of HTML element we can define them once in a generic object call it HTML element and have other objects inherit these properties and methods so inheritance helps us eliminate redundant code and finally polymorphism poly means many more means form so polymorphism means many forms in object-oriented programming polymorphism is a technique that allows you to get rid of long ethanol's or switch and case statements so back to our HTML elements example all these objects should have the ability to be rendered on a page but the way each element is rendered is different from the others if you want to render multiple HTML elements in a procedural way our code would probably look like this but with object orientation we can implement a render method in each of these objects and the render method will behave differently depending on the type of the object you're referencing so we can get rid of this nasty switch and case and use one line of code like this you will see that later in the course so here are the benefits of object oriented programming using encapsulation we group related variables and functions together and this way we can reduce complexity now we can reuse this object and do from parts of a program or in different programs with abstraction we hide the details and the complexity and show only the essentials this technique reduces complexity and also isolates the impact of changes in the code with inheritance we can eliminate redundant code and with polymorphism we can refactor ugly switch case statements well hello it's me mash again I wanted to say thank you very much for watching this tutorial to the end I hope you learned a lot please share and like this video to support me if you want to learn more about the object-oriented programming as I told you before I have a course called object-oriented programming in JavaScript if you want to learn more click on the link in the video description and enroll in the course if not that's perfectly fine make sure to subscribe to my channel because I upload new videos every week thank you and have a great day"
    },
    {
        "video_id": "2Dhec_2zGUk",
        "title": "Lec 3: OOPs Concepts in C++ | Object Oriented Programming Pillars | C++ Tutorials for Beginners",
        "url": "https://www.youtube.com/watch?v=2Dhec_2zGUk",
        "duration": 1770,
        "transcript": "so in the series of learning object-oriented programming in c plus plus in the previous video we have discussed what is object-oriented programming and how it is different from processor oriented programming the difference we have seen the basics about object-oriented programming like now in this video we'll see oops concept right before we deep down into the object-oriented programming in c plus plus you must have some idea about the concepts the no the things because of those things we call it as object-oriented programming what are those concepts like class objects abstraction encapsulation inheritance polymorphism six concepts are there so in this video i am going to talk about these concepts briefly i just want you to get familiar with these concepts in detail we will discuss about these concepts one by one in later videos once we will move you know deep down into c plus plus course right but at first you must be familiar about these concepts like what are these concept at least the basic idea you should have right so those things will discuss in this video every concept in brief i'll relate it with the real life example i hope you will get it right but before that i just want to tell you one thing with theory practice is also important the key to success in any interview specifically in programming interview coding interview is practice practice as much as possible it's not like that start practicing coding problems just you know few days before your interview no the best method of preparation is incorporating your interview preparation into your everyday coding practice it will help to improve your logic building skills your thinking capability your problem solving skills and that's exactly the industry wants a problem solver but the question is how to get started from where you can practice the problems coding problems so here is the solution this is the practice page of geeks for geeks here you will get many coding questions different different topics like from dsa array linked list stack in algorithm you will get different coding questions on the topic searching sorting and many algorithm based on many algorithm as well as company specific coding questions practice questions you also get suppose if you want to practice the problems which are being asked in amazon interview then just click on that and you can you will find out the list of problems and you can start solving these problems and it is not good for students only but as well as for working professional if you are working somewhere and you want to switch you are applying for new position then also it will help you practicing these problems will definitely help you so i think this is a great resource to practice these coding problems don't worry the link i'll put in the description box of this video you can go and check out now let's back to the topic so what are hoops concepts six concepts are there basically these are six concepts in object oriented program see as the name suggests object oriented so obviously object is the main thing everything revolve about the around the object so you'll see these concept and these four are known as you can say pillars pillars of object oriented programming but we will discuss these six things all these six concepts so let me just take one example see let's take one example like student maybe you will you know related better student so simply student in student in your class you have male as well as female student right now every student is having some common properties like two hands two legs two eyes nose height weight color these are some common properties they have right and some functions like sleep can eat can study or speak and sit here these are some common functions right every student is having either male or female so we can consider it like a student is a class which is what it is like you can say a user defined data type in technical terms if you say then it is a user definer type as in c we have structures user defined data types which is having some data members and member functions now what are those data members the attributes the properties they have like student is a class and having like you can say legs and hands some body parts you can say then you can say height weight and color right these are some properties or you can say attributes or you can say data or you can say data members so whatever the data that would be considered as in the form of that would be stored in the form of variables in the class next functions what we can have like eat sleep and sit speak and many more so these are some common functions right so class is basically what a blueprint of an entity which defines the core properties and functions of that entity now entity means one entity is male and female you know students actual students are entities like student name can be ram you can say jenny rahul nisha these are some students so male students female students right so these are and you can say real world entities and these are known as known as objects okay in my class i have a student like rahul rahul is an object right of class male class right two more classes are there you can say like male and female here we have male class and female so object is what a real world entity rahul physical existence rahul is having physical existence class is just a logical thing it's just a definition it's just a blueprint so no memory allocation would be done when you define a class no memory allocation because it is just a logical thing it's not physical object is physical thing now we can access these properties and functions of a class using objects of these class or you can say instance of the this class right rahul is what you can say an object of male class so whatever is there in male the attribute and the functions rahul can access using rahul we can access those properties and those functions so rahul is physical thing rahul is having some space right in this environment here in the class right so same when you create an object then only memory allocation would be done in the if i you know say in the form of programming so class is what it is just a blueprint or a prototype through which we can create objects or you can say it is you can say group of objects which share common properties right common properties in common you can say attributes these are attributes this is you can say behavior or methods behavior or methods or functions we can say don't worry i have notes also i'll provide you notes everything i have written in my notes handwritten notes right you just have to understand now right what is class and what is object now see object also i hope you got it right it's a physical thing or it's a real world entity right which is having some behavior or some properties of its own behavior and properties fine that is object so like suppose i have an object one object is ram you can say nisha and pile these are some objects right so objects were just an instance of a class rahul and these are instances of male class initial pile these are instances of female class so they they are having their own data and functions or you can say the code right each object is having its own data and the functions the functions which can manipulate that data each function has its own function and data like ram is having its own you can say height weight color right and on function is there ram is having its own functions rahul is also having different height color and weight every object is having its own you can say code and uh data using code or the functions we can manipulate that data fine and each object can interact with each other with the help of message passing and for interacting they don't need to have the internal knowledge of their data and code suppose if i want to rahul want to communicate with ram so it's not like that rahul has to know the internal everything about ram right what rahul need to know in which form the message would be accepted or you can say the language rahul understand hindi or english that's it and in which language rahul will respond that's it so same in programming one object can interact with other object without knowing the internal detail the code or the ah no the data of that object what just need to know the type of message would be accepted by other object and what type of output the what type of response that object will give right so that the objects can also communicate with each other using message passing so class is just a logical thing it suggests a blueprint a blueprint to create objects and objects are physical thing identify you know you can identify that entity real world entity which is having its own you can say properties and behavior right now first thing we'll discuss inheritance because through this diagram you can get it better see male and female these students are also having like these properties and these functions and female will also have female in a student will also have these properties and functions and these properties and function we have already defined in a class student so rather than defining these things rather than defining these functions and everything here also here also we will do what we just reuse this thing and how you can reuse this is one of the most important characteristics so you can say pillar of oop oop oops you can inherit these properties through inheritance so they will inherit these properties here also and here also so whatever is there these functions you can say these functions and the attributes attributes means the variables and the functions right here also and here also and male and female each class can have their extra their own attributes like some body parts in female are having which male are not having so they can have their own data their own function right male can also have their own function and data and thus common properties they can inherit from this class from this class rather than rewriting again and again so this is what beauty of inheritance these are known as child class and or you can say derived class and this is known as base class or parent class right so code reusability is there so that is why rather than writing same code again and again productivity would increase we can reuse some other code and we can just do whatever we want to do one more thing in object i want to tell in technical terms we say objects are having its own data and code through which we can manipulate the data like ram is having its own data and code means the functions this code right whatever we write here so if ram suppose i can say if ram will eat more then weight would increase so through these functions we can modify these data of that object it's not like that if rahul will eat more then weight of ram would increase no because these details are specific to these objects if jenny will eat more weight of jenny will increase not the weight of nisha or pile right so this data and code are binded together in the these objects using that code we can manipulate the data of that object only right i hope you got class objects and inheritance now we will see what is abstraction see let's take one example first suppose there is a coffee machine what is there one button is there make coffee you just press this button and your coffee is ready right if a machine second machine is something like that there we have a button like add some cold water to the pan boil the water second button is boil the water third button is add one cup of coffee there add sugar this something like this we have many buttons the complete process we have right so which one is better just the first machine having one button make coffee you just press this button and coffee is ready you don't need to go into the detail the implementation part means the making part of that coffee right so means in first machine we are just hiding the detail the process of making a coffee from the user that is what abstraction hiding implementation detail from the other world only showcase the relevant details which are relevant to the world which are relevant to the other users only showcase those details hiding the implementation detail that is just abstraction like when you switch on your fan you don't know what is happening behind there you just switch on you just press that button and your ac is on your fan is on your tv zone like your dvd player once you switch on your you know you can say the tv and the dvd player or that you can say what is that setup box then on the screen the whole world is in your room you can see everything right but behind the scene what is happening how you are getting that data on your tv on your you know set of works through satellite or what is happening you don't know right so that is what abstraction same hiding something into a function or in java we can uh you can we can achieve this abstraction with the help of interfaces and abstract classes 100 in abstraction we can achieve in java right so hiding something into a function or you know an interface these kind of things that is called as abstraction because when you call a function sometimes you don't need to go into the detail of that function that how that process is doing you just need an output you call that function and you need the output that's it because see there are in large scale application there is a large code base if you go in the detail of each and every function then it would take you even months to read out all the functions and you would never code right so rather than going into the implementation detail just showcase the relevant details only that is simple abstraction like in this you can take some other classes their animal or you can say alien i hope spelling is correct maybe animals or aliens know that like student or male 1 female can walk can uh you know eat can do these kind of things but how they don't know the implementation detail so that is simply obstruction in programming also we can achieve obstruction but how we will discuss later just i you know i just want to get you familiar with these terms basic terms next is encapsulation as the name suggests in capsule capsule means means you have seen a capsule medicine the tablet there we have a wrapper in which we have some medicine right there is a wrapper around that that thing right so that is what we are hiding the inner thing we are hiding from the inner whatever is there in the capsule we are hiding that thing by putting the wrapper from outside the world right like around the chocolate we have a wrapper so that chocolate is hidden from the outside world with the help of that wrapper right so sometimes encapsulation is also known as referred as data hiding right so wrapping up of these things data and the functions into a single unit that is known as encapsulation or you can say like something like this you can take this example binding this this you know data and the code together in one unit is known as encapsulation so simply what encapsulation we can say like here in a class this is a class in class we have we have data or attributes you can say right and we have methods or functions or behavior so binding these data and these methods or the functions together this is known as encapsulation in c plus plus that's it this is encapsulation right now you can hide this data from the outside world because we have a uh in a concept we have something in c plus but that is x specified means you just keep the data private public private protected three specifiers so you just keep the data private right and this suppose this object is having ram this is the data forum and these are methods these are the methods right for rahul also this is the data and these are methods so you can keep that data private only these functions these are public methods so only these functions these methods can can what access this data this object another object cannot access this data or another class cannot access that data let's take uh one example like uh we have in college we have multiple departments csc mechanical civil ec right suppose i am faculty in computer science department and i need one information i need some data from mechanical department right so it's not like that i can directly access the data from mechanical department right i will first talk to i will reach out to a person in mechanical department right and i i would request to that person to get me that data and after that through that person i can access the data right directly i cannot access exist so the data of mechanical department the employees or the faculties of mechanical department completely they are a single unit known as mechanical department so they are wrapped up they are in camps encamps encapsuled so the data is private to mechanical department only the faculties or employees of that department can access that data so this will increase the privacy the security of the data that is why in the previous video i have told you the main reason we have switched from pop to oop is data security and through encapsulation we can achieve that thing data security privacy by keeping the data private because we have access specifier concept here just keep all your data private and only these methods only the methods of that class access that data only right no other class can access that data if another class want to access that data they will communicate through these functions right and through these functions they can access that private data right we have some concept of friend function friend class but that also will discuss later will not go in this much detail i hope you know the basic idea of encapsulation right so it is you can say just a shield uh which prevents your data from being accessed by the code outside of that shield right or you can say the data or the variable this is the data or you can say the variables of one class can be accessed by the methods of its own class not by the other class right like other classes alien so they cannot access this data this data of human being class or a student class and how to achieve this encapsulation just keep your data private use a specifier private and keep your methods public and using these methods you can manipulate this data only these methods these functions of that class only can access this data private data this is how you can achieve encapsulation that's it now next is polymorphism see this poly means many and move means forms many forms polymorphism now how this would be related let's take a real life example here see me jenny is one person right but i have multiple forms or you can say many behaviors or many characteristics i can i have like i am i'm a faculty right i am a suppose a class teacher a tutor of any class uh or a friend or a colleague so with according to the situation i will change my behavior jenny is one only one person only but having multiple forms as a faculty like if i'm interacting with hod my behavior would be another means different if i'm in class as a class teacher or a tutor then my behavior would be different with a friend my behavior would be different with my colleagues suppose not friend but just a colleague my behavior would be different right so i can have multiple forms but person is one so this is what polymorphism right now how you can relate this in programming in programming we can have two types of polymorphism or we can achieve polymorphism uh by two types overloading and overriding see what overloading means let us take this example we have a function let me just rub this first suppose we have a function sum suppose we have this function sum one function is this i haven't written properly right some data would be there semicolon and all we have but it just just to get you familiar with this thing this function is having two argument integer this function is one end one float two float this is having three arguments right so this is what overloading of the function the function name is same but it will do sum of two integer it will do some of one in one float it will do some of two float number it will do some of three integer numbers this is what overloading just function name would be same maybe you can change the number of parameter the type of parameter the return type of that function according to that that function will behave differently so this is what overloading of the function sum so this is overloading function is same but having multiple forms one is overriding overriding means what actually overriding allows a child class to override a function which is already defined in its parent class right like let us take this example this is overloading and in overriding function name function would be same function name number of argument type of argument the return type of the function everything would be same just we change this code the implementation thing the mechanism suppose in parent class sum is equal to f x plus y this we have done sum is a variable or you can say another variable is one s x plus y maybe a child class will inherit this thing from the parent class but totally change the implementation and it will do some is equal to x minus y also it it's not correct but i just want to you know differentiate the overloading and overriding with the same example right so i have just everything is same name number of argument type of argument the return type everything is same but we have changed the implementation detail the child class has implemented that function specifically according to its need so this is what overriding of that function right let us take that example real life example ah suppose here we are we were having a function uh what walk right and male and female will inherit this function work right so male and female according to their self they can modify this like walk with legs argument will pass legs but in student class in parent class it is what normal walking like this we can walk right fine it's normal walking and they override this function walk with legs the same thing but they change this part this implementation part suppose female class they they'll change this part walk reverse something like this so they have changed the mechanism of walking although the name is same argument is same they are working with legs but they have changed the mechanism so that is overriding right and overloading means what simple if you take this example walk with legs right but another thing we have changed the argument like walk with the hands we haven't changed this mechanism this is just walk normal walking something like this but we have changed like the argument if here we are passing legs we have changed hands two hands we are working something like this so i hope you can relate this example also or if you are not able to relate you can take the previous example that some function and all right so the through these concepts we can achieve uh polymorphism like operator overloading is there function overloading is their function overriding is there in detail we will see these things in the later videos and this is known as if you achieve polymorphism using overloading that is known as compile time polymorphism this is known as runtime polymorphism so in detail we will discuss about these concepts one by one i hope the basic idea about these concepts are clear to you the four pillars of uh this object-oriented programming as well as the you can say six concepts of oops right if you have any doubt you can tell me in comment box maybe in the next video we can revise that concept or we i can take another example i can discuss that thing right so that's it for this video and the next video will see introduction to c plus plus so now i'll see the next video till then bye take care"
    },
    {
        "video_id": "URZYJlO3tbE",
        "title": "Object Oriented vs. Procedural Programming Paradigm",
        "url": "https://www.youtube.com/watch?v=URZYJlO3tbE",
        "duration": 220,
        "transcript": "In this lesson, we will explore what are programming\nparadigms and henceforth differentiate between Object-oriented programming and Procedural\nprogramming. So let's start with exploring what are programming\nparadigms. Well, programming paradigms are a way to classify\nprogramming languages based on their features. And there are a lot of paradigms that exist\nin the world of programming. Two of the most common programming paradigms\nare: 1 - Object-Oriented Programming 2 - Procedural Programming So let us explore the differences\nbetween them. On the left, we have object-oriented programming\nparadigm. For simplicity, I will call it as OOP paradigm\nand on the right, we have procedural programming paradigm. In the case of OOP paradigm, the program is\ndivided into small parts known as objects. But on the right, the program is divided into\nsmall parts called functions. And this is one of the significant difference\nbetween these two paradigms. Just because OOP paradigm supports inheritance,\nwe can reuse the code to the maximum extent. But on the other hand, since we don’t have\nobjects and classes, support for inheritance is absent. So there is limited code reusability. Features like Function overloading is supported\nin OOP paradigm. But on the other side, it is not supported. In the OOP paradigm, access specifiers are\nsupported. While on the other hand they are not supported\nin procedural programming. Due to that, OOP paradigm is more secure. Because we can use access specifiers to decide\nwhich data should be hidden and which data should be exposed to the outside world. But in procedural paradigm, due to the lack\nof access specifiers, data is less secured. There is no proper way to hide data. This makes data to be treated on top priority\nin OOP paradigm. So data becomes more important than functions. But in procedural programming, since we don’t\nhave access specifiers and no proper data hiding mechanism, so we are only left with\ndealing with functions. So by default, all data becomes public and\nwe need to manage only functions to achieve our objective. Which is quite a limitation. Isn't it? And the languages such as C++, Java, Python,\nC# falls under the OOP paradigm. And languages such as C++, FORTRAN, Pascal,\nC, basic comes under procedural paradigm. So here, you can note that C++ supports both\nOOP paradigm as well as Procedural Paradigm. That’s why C++ is often referred to as a\nHybrid language. This might confuse you right now, looking\nat the differences between these two paradigms. So for more clarity in the next lesson, we\nwill explore in detail the difference between C and C++ language. See you there."
    },
    {
        "video_id": "OEfSFrk_KEI",
        "title": "14. The difference between procedural and object-oriented programming",
        "url": "https://www.youtube.com/watch?v=OEfSFrk_KEI",
        "duration": 267,
        "transcript": "In this next set of videos, we're going to\nwalk through various ideas around object-oriented programming and how to technically implement\na number of different techniques that are used within Drupal and also used across the\nboard on many object-oriented based projects. So at its core, object-oriented programming\nwill give you a better model of how to organize your code. Now, a lot of PHP programmers started\nby simply hacking away and trying to get something that's functional and what you end up with\nis something called procedural code. You have variables and you have functions, and the\nrole of the functions is to get from point A to point B. It's to complete some kind of\ntask. So for example, we might convert data from\none format to another or we might take some data in an array and organize it according\nto its alphabetical order. And the idea is that you're constructing your code so that\nyou step through these different procedures. Now, after you have some programming experience,\nyou start to realize that a lot of these functions can be generalized so you can use them in\nvarious other situations. So for example, if you have that function that sorts items\nin an array alphabetically, you might find that useful to convert other types of data\ninto an alphabetically ordered list. For example, some XML Or a set of strings. And as you start to think this way, your mind\nis actually going more towards object-oriented programming. You're thinking about these functions\nas these little machines that can be used in different situations, not just the original\nsituation that they were intended for. When you start to dive into tutorials about\nobject-oriented programming, you'll find that people use real world objects as examples\nbecause, in a big way, the world is very object-oriented. The idea is that as you look around you, you\nsee yourself surrounded by these different objects, and objects are basically anything\nthat you can give a noun to. So for example, right now I'm surrounded by\nmy computer, a glass of water, and a lamp. Because we can name each one of these things,\nthey are really objects. And in the real world, objects aren't limited in the way that they\ncan interact with one another. So for example, I can use the lamp to illuminate the keyboard\non my computer. I can use it to see through the glass of water that I have. I can take\nthe glass of water and dump it on the computer. And really, it keeps going but the idea is\nthat the interaction between the objects in our world are limited more by our imagination\nrather than any limitation in the object itself. Now, if you apply that idea to your code,\nthen what you should end up with are these components that can be used in ways that were\nunanticipated at the start because you have modeled the behavior of that item and contained\nit in an object. And it turns out that this is actually a pretty natural way for code\nto be organized. Now, the tricky part at first is taking that\nidea and seeing how it relates to code. Because most of the time when we're dealing with code,\nwe're dealing with kind of abstract concepts, we're dealing with things that don't have\na parallel in the physical world. For example, on a website, we have images,\nwe have forms, we have blocks of content across the page, and templates. We can call each\nof these things by their name which is a noun and that indicates, at least on some level,\nthat they're objects. In addition, there are objects that have more abstract ideas associated\nwith them. For example, a calculator that performs some operation on the data that gets\nsent to it or, in the example of our function that sorts alphabetically, we have a sorter. Those little bits of code are like machines\nand they're our inventions and we can give them whatever name we want, but they are objects\nthat didn't really exist before we created them. Now, if you don't immediately see the\napplication of this different way of looking at your code, that is, looking at it as objects\nrather than a set of procedures, that's okay. That sort of perspective comes from actually\nworking with it and seeing how the code is organized and what kind of benefits arise\nfrom organizing it in that different way. So just let some of those ideas start to percolate\nand we're going to start getting our hands dirty. And along the way, we'll talk about\nthe implications of thinking of your code along these lines."
    },
    {
        "video_id": "jC0k-4Si0dM",
        "title": "Difference Between Procedural Oriented and Object Oriented Programming | POP vs OOP [Hindi]",
        "url": "https://www.youtube.com/watch?v=jC0k-4Si0dM",
        "duration": 1195,
        "transcript": "Yes, today we are going to talk about the topic, not only the contribution of the interview but also from the point table of a language, this is the most important topic that is the difference between procedure, procedure oriented language, object oriented language and object based programming language. So the simple meaning of language is this. The language in which a complete program is divided into multiple functions is divided into multiple functions where one has a function and the date has functions internally divided into multiple small small modal multiple functions and I just want to say that today if any language has to exist in the market then it is Mast B Object Oriented Programming Language class hai hai any name supose tere is n class and this class consist some function so I will always go to you from the bottom and on date this is called bottom up approach Hello friends welcome a Once again your data player, in this free course of C Plus Plus Programming, where today we are going to talk about the topic, not only from the point of view of interview, but also the points of a language, this is the most important topic, difference between procedure, procedure oriented. Language Object Oriented Language and Object Based Programming Language What is Procedure Oriented Language? What is Object Oriented Language and Object Based Programming Language and where does C++ stand among these three because we are talking about C Plus Plus, it is okay. So let's talk here one by one, what is the difference between procedure oriented, object oriented and object based programming language? Procedure oriented language is the concept where your total program is divided into multiple functions, function tomorrow and your complete programs this. If we take the mother of divided into multiple functions, let us talk that this is my function in one and the functions in date are divided into small modals and these small models are basically kal functions function one function tu ok hai function 3 so whenever we use procedure oriented language So here you will always see [Music] The whole program is divided into small functions and that is why procedure oriented language is also called function oriented language, so the simple meaning of procedure oriented language is this language in complete program. Divided into multiple functions where one is a function and one is a function Internal divided into multiple small models Multiple small functions One D Most Important Factor About This Language Whenever we talk about Procedure Oriented Language then it follows D Top Dr Approach It follows Top Dr approach is ok Procedure Origin Language Always follows D Top Dr approach It's N Par Example Ok Now we have read C is big I don't know Ok Have you read or not but a small example Look, when we do programming in C, what is actually our programming thought, first of all we have to write in and inside this mother, if we call any function tomorrow, suppose After is defined right here you see what is the program Maa is n in function and give after bill tomorrow Approach is always program from top to top Dr and comes violin when we talk about object oriented so it is a bottom of approach which now we come to what is object oriented so procedure oriented language is a language which is finely divided into multiple models and these models are basically called functions and subroutines and procedures but meli you can change it country it n function and date on d region's procedure oriented programming language we are also called function oriented program language ok and procedure oriented as many languages You will see dat jo follow d top dr approach ye in d top you have a main function and give after jo d function [Music] kal hoga to ye top to bottom ki aur hoga it is always be from top to bottom approach so tha reason this The language is called top dr language or top dr approach language which is procedure oriented language so there is my language like C Pascal [Music] Procedure Oriented Programming Language there is no object oriented concept in this language C Pascal ok this is the language like this Language is basically called procedure oriented programming language COBOL is a very old language COBOL is ok, so here is the story, we do not talk about object oriented thought, this is completely a function oriented programming language, right here but now the thing is that sir, procedure oriented language is what we need. An object oriented programming language, so brother we will come to it now but first let us talk about what is an object oriented programming language and what is the difference between object oriented and object based programming language and where c++ stands for everyone plus plus here. Where is Right standing? So now listen to it very carefully because it is a very important concept, although right now I am not telling you the features of Object Oriented. Right now we are only discussing about the difference between these languages. Okay, Object Oriented Programming Language . This means that the language in which the program is completely divided into multiple objects classes is exactly where the program is divided into classes and is divided into objects and you can follow the features of object oriented programming. A language which follows the features of object oriented programming. This is called an object oriented programming language where the thought process which is done in programming is completely in the format of object computer class. I know it is quite difficult to understand what is class what is object if you are following the sequence. So you understand, right now we have neither talked about class nor have we talked about object, but don't worry, first you try to understand a little concept, after that I will explain to you, what is class, what is object, right, object. What does oriented programming mean? A language that follows certain features. A language that reduces to object oriented thought. A language where the program is divided into multiple classes and objects. Where bill talk about date is. There are multiple classes. Okay, this class is this. This n class one like we just talked about that procedure oriented language is divided into multiple function whereas object oriented programming language is divided into multiple classes c this one and every way ever bin okay so every d program it is divided into multiple classes where object oriented We will write the code from the thought class. What is an object oriented programming language and like I told you that object oriented programming means a language, you should follow the features of object oriented programming. Now what are these features about which we are talking now. I am just listing out these features here, we will talk about them in detail when we are going to discuss what is object oriented programming which our upcoming lecturers will write but which are the features of object oriented programming series one features like polymorphism Okay [Music] Features of Object Oriented Programming Right D Features Like [Music] Class Object Inheritance Class Object Features of Object Oriented Programming So whenever we are programming in any object oriented programming language, we want that this language supports this. Features are ok, which you will get in C Plus Plus, which you will get in Java, which you will get in Python, which you will get in HP, this tomorrow I will tell you which you will get in Java Script, which you will get in purse and I have to say this just today if Any language has to exist in the market so it must be object oriented programming language. If you are today's developer then you have to understand the concept of object oriented programming. Now the era is of object oriented thought. Procedure was the oldest concept Pascal COBOL. Old Language The C Online But No Way Are Talking About The Language Support D Features Of Object Oriented Programming Which Is C++ So If In Any Language With Object Oriented Thought We Are Writing Code Where Your Program Is Divided Into Multiple Classes Rather Give Multiple Function Well we have just talked about one language where the total program is divided into multiple functions and the date is a function oriented approach but when the total program is divided into multiple classes the date is an object oriented programming language and object oriented programming. Meaning, the language that supports these features which I am talking about, now I will tell you each feature one by one in detail because these are the There are concepts, son, which we have to drink in moderation. We will understand these concepts by going into so much detail, but for now, we are only writing their names here because I have to tell you the difference, give procedure, object oriented and object [music] oriented programming language. IT FOLLOWS D BOTTOM UP APPROACH OK OBJECT ORIENTED ON ALWAYS FOLLOWS BOTTOM UP APPROACH YOUR OBJECT ORIENTED When we have to write code then you see when we write code in c++ then we will write class ok dewar give it n class ok in after class we Here we will write function meaning [music] class is any name, suggest your is n class and this class consist of some function so I will always go from bottom to you and discount on date bottom up approach this is called bottom up approach ok what we have done Major difference between process oriented and object oriented object vile object oriented follows bottom up approach procedure oriented language whenever it will follow whatever we talked about it always follows top dr approach ok [music] [music] The program goes from the bottom up to the class and this is a bottom up approach so I hope the concept is clear to you now that if we are talking about a language that it is an object oriented programming language then What will be our thought process for programming and if we are saying that the language is a procedure oriented programming language then what will be our thought process where we will talk about both the thoughts in C plus plus because actually C plus plus is IT. In this object oriented programming, there we will get procedure thought and also object thought, but object oriented programming concept is used in C Plus Plus, so whatever major focus we do, we will do that object oriented thought in C Plus Plus, where we We will talk about implementing these concepts, first again when there is a relation of social aggregation, I have written some of these, okay, so we have talked about procedure in object oriented programming language, but there is a language in between these two which is called Object Based Programming Language Okay now sir which language is object oriented so now I told you Java Python C Plus Plus HP Ruby Ruby on Rails Devar is this N language ok tomorrow ok Swift Python this R D Lets of language Java Script this saree The language is to write code with the object oriented thought, but we talked about C, we talked about Pascal, we talked about Komal, we talked about it which is a procedure oriented language, right, so now you see a small concept, what are we talking about, object. Oriented which supports all these features. Listened carefully, which also has inheritance, which now has fields, which has volumes, classes, objects, this is an object oriented right, this is object oriented programming language but if I say object oriented programming. Define in another way Object Oriented Programming Listen carefully Object Oriented Programming is equal to you [Music] Pay attention [Music] [Music] Which one will it be if it is speaking Object Oriented is the one which supports all the features This is the one which features supported by We have also given a definition of object oriented programming and object oriented programming that object oriented programming means object based plus inheritance, so object oriented means which supports all the features and my children which have other features except inheritance, where class is Where there were only objects, then what is not inheritance? This is an object based programming language, where you will get polymer, where you will get headings, where you will get classes, you will get objects, but what you will not get, inheritance, what is this property, this is a matter of fact but Whatever language is your Object Based Programming Language G Language Don't Have Inheritance Concept [Music] Vishal Basic Is An Object Based Programming Language It Is Not Object Oriented Programming Language And It Was Brought In Object Oriented Form With A New Language Named vb.net So there is a difference between V and vb.net, there is a difference between normal basic and visual basic.net, the version which is Vision Basic Six Point Zero is still an object based programming language but later on when this language was updated. So This language no it is object oriented but d name it is visual basic.net ok so this region is the same vb.net by d difference between V and vb.net in Microsoft if we want to read dot net platform then there we talk about this difference. Let's talk about c++ now, but if we get knowledge from the story then we should take it. Have you ever asked this question in an interview? Difference between object based on object oriented programming language, at least there this lecture will be useful for us. So, I hope you are understanding these concepts, so let us revise a little bit that what we were going to discuss today, the process of what we talked about is being object oriented and object oriented. What is the difference based on it and where does C++ stand in it? So on the first step we talked about procedure oriented where I told you that language in which program is divided into multiple functions models and data are function right so this is function oriented and procedure oriented programming language. In which we read that it follows this it is D top dr up note this one sorry this is in the key of classes and object [music] after but when we talk about c++ then it is boat name of Approach, then we talked about that language where object oriented features are supported, where your entire program is divided into multiple classes and this is what object oriented. Before this, what we talked about was procedure oriented, function oriented from the language where the complete program is. This divided into multiple classes is okay, so we said object oriented programming and this is what bottom up approach, why bottom up approach because where I will be at the last and rest of the classes will be at the top, then we talked about object oriented means D language support. Which talks about these features of solution, absolute data, heading in IT and many other things, date is an object oriented programming language but in between procedure oriented and object oriented, Dewar is a language where except inheritance, all other languages ​​are supported and date is what . Object Based Programming Language [Music] [Music] Perfect So this is what we talked about the concept of procedure oriented object oriented object based what is the difference and in all these we talked about different languages ​​C plus plus is meli object oriented But yes it support both procedure and object oriented concept so this also we do if we talk about top most language then C it is n procedure oriented ok C plus plus both procedure and object oriented ok Java object oriented ok Python again both procedure and Object , which language has been kept in which category, I hope you have understood the concept, which feature is supported in which language, so we also talked about the difference, I hope you have understood this important lecture and If you liked the video, then please share it with your friends and stay tuned because in the future we are going to talk about many important concepts. Our next lecture will be on Features of Object Oriented Programming which is the most important concept which is We have talked about object oriented programming, what is the meaning of object oriented programming and what are these features which we have just discussed, so let's meet in the next lecture and till then stay happy, keep smiling, don't worry, okay so let's do. Let's meet till we take care bye [Music]"
    },
    {
        "video_id": "14BL_FwQCpM",
        "title": "Fastest Way to Learn ANY Programming Language: 80-20 rule",
        "url": "https://www.youtube.com/watch?v=14BL_FwQCpM",
        "duration": 504,
        "transcript": "This is how I learned to code in Python, Javascript\nand C++ by spending only a few weeks on each of them. But, learning a new language was not always\nas easy as this. When I learnt my first programming language\nwhich was Java, I spent months watching online tutorials and following along. But when I joined Amazon, I delivered a project\nin Python within the first 2 weeks. I had never written a single line of code\nin Python before working on this project. Later when I joined Google, I used the same\napproach to quickly pick up C++ and be useful to my team. And I have done this over and over again to\nlearn other languages like JavaScript, Go and Dart. But, how am I able to do all this? Did I take some magic pill that made me a\nPython wiz overnight? Truth be told, it’s actually very simple. For thousands of years, great civilizations\nand powerful leaders have tried to uncover the secrets of learning a new programming\nlanguage. To find the answer, we have to go all the\nway back to 1945. World War 2 has just ended and after winning\nthe war, the British want to spread English throughout the world. As you might already know, English is not\nexactly a very easy language to learn as a non-native speaker. So, they created this simplified version of\nEnglish called Basic English. Basic English had only 850 words. For comparison, there are around 170,000 total\nwords in English. In addition to fewer words, Basic English\nalso had simplified grammar rules, with a focus on basic sentence structures. To popularize the language, the British used\nstate owned radio called British Broadcasting Corporation or BBC to create a show named\n“English by Radio ''. This show taught Basic English vocabulary and pronunciation to non-native\nspeakers and was a huge success. But how could just 850 words and a few basic\ngrammar constructs help people learn English? And can we use the same principles to learn\na new programming language? To answer that, we need to know a few things\nabout how the languages exactly work. Imagine a circle that contains the top 10%\nmost popular words among the 170,000 total words in English. This circle would contain words like I, me,\nyou, eat, drink etc. Then we have another circle around it that\ncontains the next 20% most popular words. This would contain words like overpaid and\nprogrammer which makes sense. And we can keep making these circles until\nwe cover all 170,000 words. In case you are curious, the outermost circle\ncontains words like nincompoop and teetotaler. For simplicity, let’s combine the innermost\ntwo circles together and the rest of the circles together. Now imagine that you start reading one of\nthe best novels of our times called “Fifty Shades of Grey” which has a total of 150,000\nwords. What you’ll find is that roughly 80% of\nthese 150,000 words in the book lie in the inner circle and the rest of the 20% words\ncome from the outer circle. For those who don’t know, this is also known\nas Pareto principle. Pareto principle states that 20% of your effort\nresults in 80% of your outcomes. And this powerful principle is the main idea\nbehind the BASIC English as well as the secret to learning a new programming language really\nfast. I applied the same principle to learn French\nand now, “Je peux parler en français mais mon accent est marrant”. “Learning a new spoken language is one thing\nbut learning a language that a computer understands is totally different”, you might say. Well, let’s try to test this hypothesis. Let’s build the same circles for the vocabulary\nof programming languages. What would be the top 10% most popular concepts\nhere? I believe it would include different data\ntypes like int, float, strings or Array etc. Maybe “if else” blocks and for loops would\nalso be part of this circle. Maybe writing functions and classes would\nalso be here. If you move outside to the next circle, you\nmight have concepts like polymorphism and inheritance etc. And you can keep drawing these circles until\nyou reach the outermost circle that might have I don’t know, maybe iterators or generators. Now if you pick all the Github repos in the\nlanguage of your choice, you will find that 80% of the code would be coming from the inner\n20% circle. And following what we learnt from the BASIC\nEnglish example, we will focus on this 20% circle first. But as we do this, we need to be careful about\n2 things. Number one, this 20% circle though fairly\nsimilar might vary a little bit across different languages. For example, in Java, you might have an Arraylist\nand you will call it just List in Python. Or in Javascript, you might have async/await\nwhich might be very different in other languages. The point is, this top 20% circle might change\ndepending on the language you pick. So, you would want to do your own research\non the top concepts for the language of your choice. Number two, when you are trying to learn these\nconcepts, you need to change your method of learning. If you were trying to learn a new spoken language,\nlet’s French for example. No matter how many movies or TV series you\nwatch in French, you will not be able to speak French unless you actually try to talk in\nFrench. In the same way, no matter how many lectures\nor video tutorials you watch in Javascript, you will not be able to code in Javascript\nunless you actually try to code in Javascript. In a video tutorial, you will usually get\nthe code that already works and if you copy it, sure enough, it will work for you as well. But, programming is the art of breaking and\nfixing things. That’s why I recommend interactive learning\ninstead of casual learning. For example, if you want to learn Python,\nyou can go to learnpython.org and do exercises, break things and fix them as you learn new\nconcepts. Similarly, for Javascript, you can use W3\nschools. I am sure you can find this kind of platform\nin other languages as well. Now that you know what to learn and how to\nlearn it, there are 2 problems left for us to solve. How to remember what we are learning and How\nto learn the rest of 80% concepts in the circle. To solve the first problem, we need to first\nunderstand the Ebbinghaus Forgetting curve. Herman Ebbinghaus was a German psychologist\nwho is well known for his work on memory and learning. He conducted experiments where he would give\nhimself some nonsense words to remember and then test himself at various intervals to\nsee how many of these words he could remember. What he found became the backbone of how we\nteach kids in the modern school system. What you are seeing is the famous Ebbinghaus\nForgetting curve. This graph is a classical exponential decay\ngraph. What this means is that right after we learn\nsomething new, we start forgetting it very quickly. But this rate of forgetting slows down over\ntime and in the end, we only retain a small fraction of what we learnt. But what if I tell you that there is a way\nto retain more of what we learnt. Ebbinghaus also studied the impact of revision\non our retention. What he found was that if you review the concepts\nagain, you can increase the number of words you remember in the end. And if you repeat this multiple times, your\nretention can keep increasing. And this is called Spaced Repetition, which\nmany of you might have already heard about. This is the reason why if you try to learn\na new language using an app like Duolingo, they keep repeating the same words again and\nagain in the exercises. But how do we apply the spaced repetition\nto learning a new programming language? The answer to this question is also the answer\nto the second problem that we still need to solve. So, let’s quickly cover the second problem\nand then we will talk about the solution. The other pending problem we have is that\nwe have still not figured out how to learn the remaining 80% of concepts. For this, we need to take a breadth first\napproach to our learning. What this means is that instead of taking\nsome random long deep path from the inner circle to the outside boundary, we just keep\nenlarging our inner circle. In other words, we slowly keep increasing\nthe breadth of our knowledge. The biggest advantage of doing this is that\nwe are only learning new things that are close to what we already know and this makes learning\nthem very easy. But how exactly do we do this? To remember more of what we have learnt so\nfar and to learn the remaining 80% concepts, all we need to do is build projects. But not just any projects, we need projects\nwith increasing difficulty. I will tell you which exact projects to build\nin a moment. But, building projects helps you in 2 ways. Number one, as you build projects, you will\nencounter the top 20% concepts again and again. And this will help you achieve spaced repetition. Number two, as you build projects, you will\nneed to learn some new concepts on the go. If you choose your projects carefully and\nslowly increase the difficulty, you can constantly expand your inner circle to become the same\nsize as the outer circle. One thing that you should be aware of though\nis that you will never be able to learn 100% of what there is to learn. But look at you. You don’t know everything about the language\nthat you speak and you are doing just fine. So, don’t obsess over learning everything. As I mentioned, choosing the right projects\nis extremely important. Doing this will not only help you learn faster,\nit will provide you with a portfolio of projects that you can write on your resume to impress\nthe hiring managers. If you want to know about the 5 projects that\nI recommend to all beginners, you can watch this video. My name is Sahil and I will see you in the\nnext one."
    },
    {
        "video_id": "mDgx3yTtvtg",
        "title": "Should you Learn C or C++ First before learning Python Programming Language?",
        "url": "https://www.youtube.com/watch?v=mDgx3yTtvtg",
        "duration": 162,
        "transcript": "hello and welcome to musings by amit if you're new to this channel then my name is amit patel and you are watching musings with software engineers uh sure surabc hello sir is it necessary to learn cc plus to learn python no you can learn python as an independent programming language c c plus plus python java all these are basic programming languages you can learn programming using any of these programming languages okay the basic programming languages like okay how does the the if conditions work how does the loops work how do you write a function how do you call a function all these particular things are possible within all the programming languages okay so when you're learning basic python you can start directly with python and then learn everything about python later on so it is not necessary to learn i learned my first so my first programming language was of course c because c was there in college and then i also joined a programming institute to learn c okay but after that in 1997 just because before i started my software company i went to a place called ncst i don't know if they are still there ncsc was a was institute called national competence in software technology this was an institute that was run by the government and in that they used to have an exam all over india from that they used to select students okay in that i learned programming on on pascal programming language so the way of teaching programming was using pascal programming language in which we learned programming and data structures and algorithm everything in pascal programming language but the same thing after i after i finished learning programming in pascal when i started actually developing application in visual basic i used the same logic that i was learning in pascal for data structures and algorithm and i use the same logic in visual basic programming okay so you can learn any basic programming language so everyone thank you very much for attending this live spread the word around for this channel these lives are happening three hours long i'm trying to bring as much information as possible with every lines and see you on the next live on thursday 9 5 pm thank you very much"
    },
    {
        "video_id": "pTB0EiLXUC8",
        "title": "Object-Oriented Programming, Simplified",
        "url": "https://www.youtube.com/watch?v=pTB0EiLXUC8",
        "duration": 454,
        "transcript": "[Music] a popular interview question concerns the four core concepts in object-oriented programming this concepts are encapsulation abstraction inheritance and polymorphism let's look at each of these concepts before object-oriented programming we had procedure of programming that divided a program into a set of functions so we have data stored in a bunch of variables and functions that operate on the data this style of programming is very simple and straightforward often it's what you learn as part of your first programming subject at a university but as your programs grow it will end up with a bunch of functions that are all over the place you might find yourself copying and pasting lines of code over and over you make a change to one function and then several other functions break that's what we call spaghetti code there is so much interdependence e between all these functions it becomes problematic object-oriented programming came to solve this problem in object-oriented programming we combine a group of related variables and functions into a unit we call that unit an object we refer to these variables as properties and the functions as methods here's an example think of a car a car is an object with properties such as make model and color and methods like start stop and move now you might say what marche we don't have cars in our programs give me a real programming example ok think of the local storage object in your browser's every browser has a local storage object that allows you to store data locally this local storage object has a property like length which returns the number of objects in the storage and metals like set item and remove item so in object-oriented programming we group related variables and functions that operate on them into objects and this is what we call encapsulation let me show you an example of this in action so here we have three variables base salary over time and rate below these we have a function to calculate the wage for an employee we refer to this kind of implementation as procedural so we have variables on one side and functions on the other side they're hard decoupled now let's take a look at the object-oriented way to solve this problem we can have an employee object with three properties a salary over time and rate and a method called get wage now why is this better well first of all look at the get wage function this function has no parameters in contrast in a procedural example our get wage function has three parameters the reason in this implementation we don't have any parameters is because all these parameters are actually modeled as properties of this object all these properties and the get wage function they are highly related so they are part of one unit so one of the symptoms of procedural code is functions with so many parameters when you write code in an object-oriented way your functions end up having fewer and fewer parameters as Uncle Bob says the best functions are those with no parameters the fewer the number of parameters the easier it is to use and maintain that function so that's encapsulation now let's look at abstraction think of a DVD player as an object this DVD player has a complex logic board on the inside and a few buttons on the outside that you interact with you simply press the play button and you don't care what happens on the inside all that complexity is hidden from you this is abstraction in practice we can use the same technique in our objects so we can hide some of the properties and methods from the outside and this gives us a couple of benefits first is that we'll make the interface of those objects simpler using an understanding an object with a few properties and methods is easier than an object with several properties and methods the second benefit is that it helps us reduce the impact of change let's imagine that tomorrow we change these inner or private methods these changes will leak to the outside because we don't have any code that touches these methods outside of their containing object we may delete a method or change its parameters but none of these changes will impact the rest of the applications code so with abstraction we reduce the impact of change now the third core concept in object-oriented programming inheritance inheritance is a mechanism that allows you to eliminate redundant code here's an example think of HTML elements like text boxes drop-down lists checkboxes and so on all these elements have a few things in common they should have properties like hidden and inner HTML and metals like click and focus instead of redefining all these properties and methods for every type of HTML element we can define them once in a generic object call it HTML element and have other objects inherit these properties and methods so inheritance helps us eliminate redundant code and finally polymorphism poly means many more means form so polymorphism means many forms in object-oriented programming polymorphism is a technique that allows you to get rid of long ethanol's or switch and case statements so back to our HTML elements example all these objects should have the ability to be rendered on a page but the way each element is rendered is different from the others if you want to render multiple HTML elements in a procedural way our code would probably look like this but with object orientation we can implement a render method in each of these objects and the render method will behave differently depending on the type of the object you're referencing so we can get rid of this nasty switch and case and use one line of code like this you will see that later in the course so here are the benefits of object oriented programming using encapsulation we group related variables and functions together and this way we can reduce complexity now we can reuse this object and do from parts of a program or in different programs with abstraction we hide the details and the complexity and show only the essentials this technique reduces complexity and also isolates the impact of changes in the code with inheritance we can eliminate redundant code and with polymorphism we can refactor ugly switch case statements well hello it's me mash again I wanted to say thank you very much for watching this tutorial to the end I hope you learned a lot please share and like this video to support me if you want to learn more about the object-oriented programming as I told you before I have a course called object-oriented programming in JavaScript if you want to learn more click on the link in the video description and enroll in the course if not that's perfectly fine make sure to subscribe to my channel because I upload new videos every week thank you and have a great day"
    }
]