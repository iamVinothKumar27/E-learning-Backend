[
    {
        "video_id": "ok-plXXHlWw",
        "title": "HTML in 100 Seconds",
        "url": "https://www.youtube.com/watch?v=ok-plXXHlWw",
        "duration": 154,
        "transcript": "hypertext markup language or HTML is a language that defines the structure of content on a web page development started in 1989 at CERN by Tim burner Lee who had just invented the world's first web browser worldwide web the origin of www but he needed a publishing language to display content within it so he chose a syntax based on the standard generalized markup language which uses opening and closing tags to provide meaning to otherwise unorganized text like H for heading p for paragraph and most importantly a for anchor to link to a different web page the language underwent many changes during the initial rise of the internet and was standardized as HTML 5 in 2008 the version we know and love today modern HTML contains tags to handle a variety of different media types like video audio and canvas to draw custom graphics on the Fly the typical HTML element starts with an opening and closing tag in the middle we have content which might be text or additional HTML elements called children the opening tag may also have one or more attributes which are key value pairs that can customize the appearance or behavior of the element to build your first web page create a file named index.html this file contains a hierarchy of nodes based on the document object model or Dom a web page starts with an HTML tag and has exactly two children a head and a body the head contains things that aren't directly shown in the web page like a title or a meta tag to give the page a description but notice how The Meta element has no closing tag closing tags are generally optional when an element is fully self-contained the body contains the actual UI for the end user we might start with an H1 heading followed by a paragraph of content to add an image we use an image tag which you'll notice is self closing then Define The Source attribute as the file path to the image and you'll want to give it an ALT description to make it accessible to robots and Screen readers what makes web pages revolutionary though is their ability to link to other web pages on the information Super Highway use an anchor tag to create a link then Define the hre attribute as the web page that you want to navigate to when clicked HTML also provides structural tags like division or div which are often used to group elements together where they can be styled to represent complex UI elements like navb bars when you're happy with your code grab the full file path to the HTML file and paste it into any web browser congratulations you just built your first website this has been hypertext markup language in 100 seconds hit the Subscribe button so you don't miss the upcoming sequence thanks for watching and I will see you in the next one"
    },
    {
        "video_id": "qz0aGYrrlhU",
        "title": "HTML Tutorial for Beginners: HTML Crash Course",
        "url": "https://www.youtube.com/watch?v=qz0aGYrrlhU",
        "duration": 4174,
        "transcript": "welcome to the first part of the ultimate html and css series in this series i'm going to take you on a journey and teach you all the skills you need to build fast and beautiful websites that look great on all kinds of devices i'm assuming you know nothing about html or css i want to learn everything from scratch so in the first part of this series we're going to talk about the fundamentals of web development with html and css in the second part we'll explore the advanced concepts and in the third part we'll put everything together and build a beautiful responsive and blazingly fast website for an imaginary cloud hosting company called mashify if you want to play with this website just head over to mashify.com and see it for yourself this is what you're going to build in this series i'm ash hamadani and i've taught millions of people how to code or how to become professional software engineers through my coding school and youtube channel if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] all right let's talk about the tools you need to take this course for the starter you need a code editor there's so many code editors out there like visual studio code or vs code sublime text adam and so on in this course i'm going to use vs code along with a few extensions for starting a web server and formatting our code you're welcome to use your favorite code editor if you know what you're doing but otherwise head over to code.visualstudio.com and download the latest version of vs code now here inside vs code we're going to install a couple of extensions so let's open the extensions panel and search for preview here's the extension we're going to install prettier code formatter with this extension we can format our code and make it pretty this is a very popular extension as you can see it's been downloaded more than 9 million times so over here you're going to have an install button just click it and you're done next we're going to install another extension called live server with this we can launch our website inside a development web server again this is a very popular extension it's been downloaded almost 8 million times now in addition to these we're going to use a browser to view and test our web pages again you can use your favorite browser but in this course i'm going to use google chrome and i encourage you to use the same browser so you can easily follow the course we're going to start our web development journey here in every section you will learn something new about web development and by the end of this course you will put all of this together to build a beautiful web page in this section we're going to talk about the fundamentals of web development you'll learn the languages and tools used in web development as well as the key concepts and vocabulary such as url http gum and so on we're also going to talk about how websites work so you will understand what exactly happens under the hood when you use your browser to visit a website you will also learn how to inspect network traffic using chrome dev tools which is a very powerful tool used by front-end developers we'll also talk about the basics of html and css and validating web pages which is something a lot of developers miss this is going to be an awesome journey so let's jump in and get started [Music] this course is your first step towards becoming a web developer so let me give you a simple roadmap to know where you are and where you should go next every website has two parts a front end and a backhand the front end is the part that you see in your browser and interact with all the visual aspects the back end is the part that powers the front end it's behind the scenes and is mainly about storing data in databases and providing it to the front end so web development jobs fall into three main categories front-end development back-end development and full-stack development which involves both front-end and back-end development front-end developers use html css and javascript to build front-ends back-end developers have different sets of tools available to them which is outside the scope of this course so let's talk about html css and javascript html is short for hypertext markup language i know it's a mouthful but basically we use html to define the building blocks of our web pages css is short for cascading stylesheet and is used for styling web pages and making them beautiful javascript is used for adding functionality to web pages let me give you an analogy think of a building a building in the real world is like a web page on the internet it has a skeleton or structure it can have pretty walls windows and tiles and it can have certain functionality for example when we press the elevator button it comes to pick us up here's a real example let's say we want to build a website like twitter for each tweet we want to have a layout like this so first we use html to define all the building blocks of this layout what are these building blocks here an image some text indicating the user's twitter handle another block of text containing the message and three icons for commenting retweeting and liking the tweet we use html to add these building blocks to our web page then we use css to give it visual effects for example with css we can make the font bold we can make our image round we can add some padding around here we can change the color of these icons and define their look when we hover over them so css is all about aesthetics or visual effects with css we can also create beautiful animations now most web pages these days are interactive they respond to our actions like clicks and scrolls this is where javascript comes in with javascript we can add functionality or behavior to our web pages for example we can like your tweet so javascript is a programming language while html and css are not meaning we cannot use them to tell computers what to do we use them to define the building blocks of our web pages and style them every webpage you have seen on our internet is built with these three languages so the better you learn and understand these languages and their features the better you will be at front-end development so your front-end development journey starts with html and css i would say if you spend three to five hours every day studying and coding you should be able to have a reasonable understanding of these two languages in about a month or a month and a half once you learn these languages then you need to learn javascript i have a separate series for learning javascript so after finishing this series you may want to enroll in that series i would say learning javascript would probably take another six weeks of your time of course you're not going to be a javascript expert in just six weeks but you will have a reasonable understanding of it and you will learn more as you work on different projects so the first three months is all about the fundamentals now building websites often include a bunch of repetitive tasks this is where front-end frameworks and libraries come in a framework or a library comes with a lot of code that we can reuse in our websites so they help us get the job done faster that's why a lot of companies these days use one of these popular frameworks like react angular or vue now technically react is not a framework it's a library but subtle distinction on site all these tools serve the same purpose they help us build applications faster now you don't need to learn all of these to get started different companies use different tools for different projects so as you move from one project to another you may want to learn about the other tools if you're starting out just focus on react because it's the most popular tool in this space once you learn react you can always learn the other tools if needed for react you would probably need one to two months again i have a comprehensive course on react more than 40 000 people have taken this course and loved it alright what's the next step version control systems we use a version control system to keep track of our project history and work collaboratively with others there are many version control systems out there like git subversion mercurial and so on but git is the most popular tool in this space and is used in more than 70 of software companies that's why you'll see it in almost every job description i would say you would probably need two weeks for learning git and again i have a comprehensive course for you so these are the essential skills that every front-end developer must have you'll see these listed on almost every job description now different jobs require other skills but these skills vary from one company to another so you can learn these additional things in the future or on the job for now just focus on these four skills or four steps remember less is more don't try to learn too many things quickly you won't learn anything you'll just waste your time alright that's your roadmap next we're going to talk about how the web works [Music] have you ever wondered how the web works in this lesson i'm going to tell you exactly what happens the moment you type the address of a website into your browser and hit enter as part of this we're going to talk about a few important concepts and terms that you need to know as a web developer so let's say we launch our browser and head over to a website like codewithmosh.com now this address that we have in the browser address bar is called a url which is short for uniform resource locator basically it's a way to locate a resource on the internet resources can be web pages also called html documents they can be images video files fonts and so on so we type the url of a website and hit enter what happens now well there are two pieces involved here the browser also called the client and the computer or computers that host our target website we refer to these as web servers or servers for short this is what we call the client server model the client requests a service the server provides the service so our browser sends a message to the server and says hey give me the home page of this website this is kind of similar to how you send your friend a text message you can think of your phone as the client sending the message and your friend's phone as the server receiving the message now back to our example this message is formatted based on a protocol called http or hypertext transfer protocol you've probably noticed it before but never know what it is in simple terms http is a language that clients and servers use to talk to each other it's not a programming language it's just a plain textual language for communicating over the internet we also have https which is http with encryption so the messages exchange between the client and the server are encrypted here is a simplified example of an http message with this message the browser tells the server what it's looking for so on the first line it says that it wants to get a page or a file called index.html using http version 1.1 index.html often represents the home page of websites on the second line we can see the host that is codewithmosh.com and on the third line we can see the language that the client can accept in this case english now don't worry about memorizing any of this all i want you to understand here is that this message is structured based on the http protocol that clients and servers understand so the server receives this message it figures out what the client is asking and then it will send a message back to the client the first message is called an http request and the second message is called an http response every data exchange using the http protocol involves two messages a request and a response now what is in the response here's a simplified example on the first line we see the version of http protocol used followed by a number which is the status code 200 means successful or okay right below that we can see the date and time of the response next we can see the type of content the server is sending back to the client in this case text html and after that we can see the html code or the html document that represents the home page of codewithmosh.com of course the actual html code is way longer now as the browser reads this html document it constructs what we call a dom or a document object model don't let this fancy name scare you this is a model that represents the object or elements in our html document what are these elements all the building blocks of our page like paragraphs of text images links and other stuff you will see this in action in the next lesson now as the browser is reading this html document that is returned from the server it discovers references to other resources in this document like images fonts and other stuff each of these resources has an address or a url so for each resource the browser sends a separate http request to the server to fetch that resource many of these http requests are set in parallel so we can see the page as quickly as possible once the browser has all the necessary resources it will render the html document rendering an html document means displaying it it's a fancy technical term we use often so in a nutshell our browser sends an http request to the server and receives an http response this http response contains an html document the browser reads that html document to construct a document object model and render the page in the next lesson i'm going to show you all of these steps in action [Music] all right let's see http requests and responses in action so open up chrome and head over to google.com now we need to access chrome dev tools this is a very powerful tool used by frontend developers so on the top we go to view developer developer tools now look at the shortcut on mac it's alt or option command and i on windows is obviously different but remember the shortcut because it's much faster to access the devtools via the keyboard so here's the dev tools the first time you see it it might appear a bit intimidating but trust me it's much easier than you think throughout the course you're going to learn more about the dev tools so here we have a few different tabs elements console sources network and so on in this demo we're going to go to the network tab so we can inspect the network traffic to and from google.com now by default devtools is docked to the bottom of the screen we can dock it to the left to the right or undock it as a separate window so over here we can dock it to the left side a lot of frontend developers like this layout so they put devtools on the left side and they have their website on the right side now in this demo i'm going to undock it as a separate window so we have more space to work with so let's undock it good now we need to refresh our website as you can see over here on match we can press command on r on windows is probably control and r alternatively we can go back to this window and press the refresh button now back to the dev tools look at all these items over here these are the http requests that are sent from our browser to google.com as you can see there are totally 45 requests and here's the amount of data transferred over the network so in this case just over 94 kilobytes now look at the first item in this list this is the first http request that chrome sent to google.com as you can see with this request the browser wanted to get a document and the status of this request is 200 which means okay over here you can see the amount of data transferred over the network for this request and the time it took to get the response now if we click on this request we can see more details about it so here on the headers tab we can see all the headers of our request and response so here are some general headers like request url request method which is get status code that is 200 we talked about it remote address this is the new make representation of google.com now down below we have response editors there are so many headers here you don't have to worry about them but as an example look at content type we talked about this in the previous lesson so the type of this response is text html below that we have the date and time of the response now if we click on the preview tab we can see a preview of the html document that is returned from the server so this is the home page of google now in this html document we have references to other resources like images fonts and so on so all these subsequent requests are sent to download those resources so right below the first request we have a request for downloading a png or an image file here's another request for getting another image we have two requests for getting two different fonts and so on now we can easily filter this list so let's click on the filter icon here by default we see all requests but we can filter by request type for example we can select doc to see requests for downloading html documents or font to see the requests that were sent to download fonts and so on next i'm going to show you how to create your first html document [Music] alright first things first here on your desktop or anywhere on your computer right click and create a new folder i'm going to call this html but we could call it anything now let's go back to vs code and open the explorer panel then we go to open folder and open the folder that we just created good now this folder is currently empty so let's add a new file here called index.html as i told you before index.html often represents the home page of websites so let's go with that now we can close the explorer panel by pressing command and b on mac or control and b on windows good now the first thing we need to do here is to tell the browser that this is an html5 document so we type a left angle bracket now look at this suggestion list the first item here is doctype or document type let's press enter or tab vs code generated this piece of code for us so with this line of code we can tell browsers that this is an html5 document this line of code here is called doctype declaration in the previous versions of html our doctype declaration was so long it was so messy but html5 solved this problem so all we have to type is doctype html and by the way html is not a case sensitive language which means it's not sensitive to uppercase and lowercase letters but conventionally speaking we type everything in lowercase except doctype this is just a convention we could type this in lowercase and that's perfectly fine so let's revert it back now right after this we need to use our html elements to define the structure of this web page the first element we're going to use is the html element so we type html and then press tab or enter once again vscode generated this piece of code for us so what we have here on the left side is called the opening tag and what we have on the right side is the closing tag so most html elements have an opening and a closing tag but there are exceptions as i'm going to show you later in this video now inside this element we're going to add additional elements now because i don't want to type everything in one line i'm going to press enter that's better now here we're going to add two elements head and body so once again we type head press tab good and then body we use the head element to give browser information about this page for example here we can use the title element to specify the title of this page that appears in the browser over here so let's type my first web page now let's save the changes by pressing command and s on mac or ctrl and s on windows good now before going any further let's right click somewhere and go to open with live server so we're going to open this page using the development server that we just installed okay all right take a look so our page is currently empty because we haven't added any elements inside this page and over here we can see the title that we just typed my first web page now look at the url or address of this page we have 127.0.0.1 this number or this ip address represents the local computer it's globally known so everybody knows 127.0.0.1 references the current computer after that we have a colon and then we have the port number on which our web server is listening so our web server is waiting for http requests on this port okay then we have a forward slash followed by the name of our file index.html now back to vs code inside the body element we're going to add elements that would appear on our page so let's say we want to display a tweet what elements do we need here an image and some text elements so we type img short for image and then press tab here's our image element now this image element is different from the other elements we have created so far can you tell the differences there are two differences here the first difference is that here we don't have a closing tag we only have an opening tag because the image element cannot have any child elements that's the reason now in the previous versions of html we used to add a forward slash here and this represents a self-closing tag but we don't have to do this in html5 so i'm going to keep the code simpler now here we have two attributes source and alt with these attributes we can supply additional information about an element so we use the source element to specify the path to our image so let's open up the explorer panel one more time by pressing command and b on mac or control and b on windows here i'm going to create a new folder called images now for this demo i'm going to use my own image which you can also download right below this video but you can use any image that you want so here's my image i'm going to drop it onto the images folder it's right here okay now let's close this window good so where is this image relative to our index.html file it's inside the images folder right so here in double quotes we type images slash mosh.jpg now vs code is suggesting this name so we can press tab to complete the code beautiful now alt is short for alternative text and we use this attribute to give the browser some text to display in case the image cannot be displayed we'll talk about this in more detail in the future so for now i'm going to delete this attribute good now after the image we're going to add a text element so we type p that is short for paragraph tab and here we can type my twitter handle so at marsh hammondi after that we're going to add another text element and here we can type the body of our tweet so i love to teach you html perfect save the changes now back in the browser our page refreshed automatically this is one of the beauties of live server so we don't have to manually refresh the page every time we make changes now look at what we have here so we have my image and right below that we have two text elements take a look unfortunately they're not very visible obviously this doesn't look like a tweet because we haven't applied css yet as i told you before we use html to define the structure or the building block of our web pages in the next lesson i'm going to show you how to apply css so our page looks kind of like a real tweet [Music] all right now let's see how we can use css to improve the look and feel of this page look at our head element currently we have a single element inside the head element that is our title element right now after the title we're going to add another element called style this is where we're going to write our css code so in between style tags we're going to write a bunch of css rules first we're going to work on this image our image is currently too big so let's make it a bit smaller back to vs code over here we're going to type img to reference our image element then we type a pair of curly braces and inside the braces we write one or more css declarations each declaration contains a property and a value so here we can set the width property to let's say 100 pixels so we type the property colon and then the value and then we terminate this line using a semicolon so we can write multiple css declarations now let's save the changes back in the browser our image looks smaller that's a lot better but look at the edges the edges are so sharp i would like to make them a bit round so they appear softer now back to our rule here we're going to set the border dash radius property to let's say 10 pixels now don't worry about memorizing any of these properties we're going to go over them several times throughout the course in this lesson i just want you to get a sense of what it's like to use css okay so save the changes now look the edges are round and look softer now let me show you a trick if we set border radius to a value that is half of the width we'll get a round image so i'm going to set this to 50 pixels and here's the result that's a lot better now our elements are stacked vertically i want the image to be pushed to the left side so let's set the float property to left this will push the image element to the left side of our text element take a look so that's a lot better but our image is so close to the text i want to add some space after the image so here we use another property called margin dash right we can set it to 10 pixels save and that's a lot better now let's make the username bold so we're going to repeat one more time this time we're going to apply a rule to our paragraph element so here we're going to set the font dash weight property to bolt take a look see what happened both our text elements are bold but what if you want to apply this style only to the username well we have to separate these two paragraph elements so i'm going to give the first paragraph element an attribute called class so class equals double quotes class is short for classification and we can use this attribute to put this element inside a different class or a different category just like the products in a supermarket in a supermarket we have products in different categories right so i'm going to put this paragraph element inside a class or inside a category called username and then i'm going to change this rule so this rule is currently applied to all paragraph elements but i want it to be applied only to paragraph elements with the username class so right after p we type dot username now we can also remove p and this rule will apply to all elements that have the username class whether there are paragraph elements or other types of elements okay now save the changes and take a look so that's a lot better this is css in action as you can see css has a different syntax or a different grammar than html throughout the rest of the course you're going to learn both these languages in detail next i'm going to show you how to format your code using prettier hey guys mosh here i just wanted to let you know that this video you've been watching is the first hour of my ultimate html and css series so after you watch this video if you want to learn more from me you can enroll in the full course which is about 13 hours long and covers everything you need to know to build professional quality websites with html and css it also includes summary notes exercises a real project a certificate of accomplish and you can add your resume and a 30-day money-back guarantee to get a refund if you are not satisfied so you have nothing to lose and a lot to learn so if you're interested i put the link in the description box [Music] one thing you need to know about browsers is that they ignore white spaces in html and css code for example i can put all these elements on a single line and everything still works let me show you so save the changes back in the browser we have the same result as before because browsers don't care how we format our code but formatting is very important when it comes to reading and maintaining code we want our code to be beautiful and perfectly formatted just like an article this is where we use the prettier plugin with prettier we can format our code in a consistent fashion this is super important when you're part of a team because different people have different ways of formatting their code but if everyone on the team uses the prettier plugin the code will be consistently formatted so let me show you how to use preview on the top we go to the view menu look at the shortcut for the command palette on mac it's shift command and p on windows it's probably shift control mp so let's bring up the command panel and here we search for format document now we press enter we get this message saying there are multiple formatters for html files select the default formatter to continue the reason we're getting this message is that vs code by default comes with a formatter for formatting html files but we have installed prettier which is a separate formatter so let's go to configure and tell vs go to use prettier to format html and css files okay now prettier formatting my code so none of those elements are on the same line this is a lot better but let me show you a trick we don't want to format our code every time we make a change so we can configure vs code to automatically format the code the moment we save the changes so on the top let's go to the code menu then preferences and settings like here search for format and save here's the setting let's enable this setting now every time we save the changes vs code automatically formats our code using prettier [Music] we talked about the dom or document object model i told you that when the browser reads the html document that is returned from the server it constructs a document object model now let me show you this document object model in action so once again we're going to use chrome dev tools the shortcut on mac is shift command and i on windows is probably shift control and i i'm not really sure so let's open up dev tools now in this lesson we're going to look at the elements tab now what we have here on the left side is our document object model so we see the same elements that we created earlier in the course we have the html element head body and so on but we have some additional elements that are injected by live server for example we have the script element and two divs don't worry about these these are purely used by live server so it automatically reloads our page now we can hover over any of these elements and you can see that element highlighted on the screen now we can click an element and on the right side we can see the styles applied to this element so look at the styles we defined for the image element with border radius and so on we can enable or disable these styles so we can disable the width property and now our image is big we can bring it back we can also change its value so we can set it to let's say 50 pixels now our image is smaller we can use the up and down arrows to change this value this is pretty handy so a lot of front-end developers use devtools to play with these styles and get the look they want once they figure out the exact styles and their values then they apply them in the code now one more thing over here we can see where these styles have been applied so in index.html on line six we can click on this link and this takes us to the exact line of code where we wrote that style now we are currently on the sources tab so we can go back to elements and inspect other elements so this is the basics of inspecting elements using devtools we're going to talk about this in more detail in the future [Music] the last thing we're going to cover in this section is validation so as we write code we may run into problems if you have a typo in our code or don't use the right syntax or grammar our web pages may not look as expected in these situations we can use a validator to identify the potential errors in our code now currently we don't have any problems on this web page it looks perfectly fine to me but let's run it by the standard html validator so we go to validator.w3.org this is a standard markup validation service we have three methods for validating our html markup we can validate by an address if our website is live on our internet but this doesn't work for us because our website is currently hosted locally in our development server so this ip address that we have over here 127.0.0.1 this is a local ip address so no one else can access our website so here we have two other methods we can validate by file upload or by direct input in this case i'm going to go with file upload so let's upload our index.html file and check so look we have one warning and two errors the warning is saying that we haven't added the lang or language attribute to the html start tag this is a common best practice because with this we can tell search engines what is the language of this webpage so they can do a better job at displaying the results this is very easy to fix so here's our html tag we're going to add the lang attribute and set it to en which is short for english now what is next we have an error saying the character encoding was not declared don't worry about this we'll talk about this in the next section so let's look at the second error it's saying that an image element must have an alt attribute so earlier we had this auth attribute i told you that we use the alt attribute to provide a description for our image so if the image cannot be displayed the alternative text will be displayed again we're going to talk about the alt attribute in more detail in the future so back to our code let's fix this error real quick here's our image tag let's add the auto attribute and for the description i'm going to say an image of mosh hammer daddy now save the changes let's re-upload the file and validate it one more time okay this time we have only a single error and that has to do with character encoding which we're going to talk about in the next section so this is all about html validation now for css we have a different validator so we go to jigsaw.w3.org css validator now you don't have to memorize this address simply go to google and search for css validator here's the first link so we have the same interface we can validate our css code using an address or by file upload or direct input now in this case we have embedded all of our css code inside our html markup but as our web pages get more complex we want to separate our css code into separate files so our code is better organized we'll talk about this in more detail in the future so for now i'm going to copy all of our css code and then go to the third tab paste it over here and validate it so we don't have any errors everything is perfect so this is all about validation validation is very important if your web pages aren't displayed as expected always start with a quick validation because this can often point you in the right direction right that brings us to the end of this section in the next section we're going to explore html in more detail [Music] we're going to continue our web development journey and explore html in more detail so in this section we're going to cover the essential html elements you need to know to build web pages you will learn all the elements used for displaying text links images lists tables as well as container and structural or semantic elements even if you know the basics of html i would still encourage you to watch this section thoroughly because a lot of people don't use these elements the right way so let's jump in and get started [Music] earlier in the course i told you that we use the head section to give browsers and search engines information about the web page so let's explore it in a bit more detail i'm going to start with a blank document now let me show you a cool trick if we type an exclamation mark and then press tab we get a basic html boilerplate which means a basic html template so on the top we have our doctype declaration below that we have our html element with the lang attribute which is a common best practice next we have our head section with a bunch of elements we're going to talk about in a second followed by the body section so this is a very basic html boiler plate now what do we have in the head section well we have a couple of metal elements for giving information about this web page the first meta element is for defining the character set what is a character set well computers don't understand characters like abc and so on they only understand numbers which are represented in the binary format zeros and ones so using a character set we can map a character to a numeric value the first character set that was designed was the ascii character set which is short for american standard code for information interchange ascii can only represent the characters in the english language so it's very limited so over here different character sets have been created to represent more characters in international languages the character said that we use most of the time these days is utf-8 which can represent almost all characters in the world so back to our code with this meta element we're defining the character set used in this html document okay now below that we have a meta element for configuring the viewport the viewport is the visible area of a web page so it is this area over here obviously on a mobile device or on a tablet our viewport is smaller but here on desktop we can change the size of the viewport by resizing the browser so now our viewport is smaller okay now back to our code with this element we're defining the initial width and zoom factor for the viewport we'll talk about this in more detail in the future for now all i want you to know is that we need this element so our web pages look good on all devices mobiles tablets and desktop computers so as a best practice every web page should have at least these two meta elements but we have additional meta elements let me show you so if you type meta in this list you can see all possible meta elements for example we have this element for defining keywords on a web page so let's select this here we can type multiple keywords like html comma css and so on in the past these keywords were heavily used for search engine optimization but these days most search engines don't put too much weight on these keywords but we can still use them to define the keywords that represent this page we have another meta element for defining a description for this page so if you type meta colon desk and then press tab or enter here we can type a description for this page what we type here will appear on google or other search engines when someone searches for a website for example if we search for apple here's what we get now look at this text what you see here comes from this element over here so this is the purpose of metal elements with this metal element we can give information about the web page alright next we're going to talk about the elements you need to know for working with text [Music] all right now let's talk about the most common elements for working with text so you learn about the p or paragraph element which we use for displaying some text so here i'm going to say i love to teach you html now sometimes we want to emphasize a part of our text let's say the html word here to do that we can wrap it inside an m or emphasis element so here i type m press tab here's the emphasis element let's hover over it and see what the tooltip says it says the m element represents stress emphasis of its content so whenever we want to emphasize some content we can wrap it inside the m element so in this case i'm going to move html inside these tags now let's save the changes here's what we get so by default browsers display emphasized content in italic but don't assume that whenever you want to display italic content you should use the m element because the purpose of the m element is to emphasize content in our html document and this helps search engines extract important content in our documents anything to do with styling should be done in css for example here we can change the default style of emphasize element and remove the italic let me show you so in the head section we add the style element and here we define a rule for emphasized content we can set the color to red and font style to normal now don't worry about memorizing any of these css properties we're going to go over them multiple times throughout the course but let's see what happens now that we apply these styles so our emphasized content is displayed in red and is no longer italic now in the past we had an element called i which was short for italic if we use this element we get the same result as before our content is displayed in italic but this element is considered deprecated because html is not meant for styling it should only be used for structuring content so don't use the i element to display content as italic okay now we have a similar element in html called strong let's hover over it and see what the tooltip says the strong element represents strong importance seriousness or urgency of its contents conceptually it's kind of similar to the emphasis element so where you should use it really depends on your context on your content now let's save the changes and see what we get so by default strong elements are displayed as bold but once again we can always change the styling now in the past we had another element called b which is short for bold so whenever we wanted to make something bold we use this element but once again this element is considered deprecated because styling should be done in css and not in html okay so don't use b or i elements now i'm going to remove this element and just add html let me show you a cool trick let's say we want to wrap this word with the m element there is a shortcut for it so on the top we go to the view menu look at the shortcut for the command palette on mac is shift command on p and on windows is probably shift ctrl np so let's select html and then bring up the command palette with this command palette we can execute commands in vs code so here i'm going to search for a command called wrap with abbreviation that is the first command in the list now we press enter and here we type the element that we want to use to wrap our selected content in this case m press enter done so i didn't have to manually create an m element and then move html inside it it's very handy so this is all about text now let's talk about headings so in html we have six heading elements h1 we have h2 h3 h4 h5 and h6 so let's see what we get so heading 1 represents the most important heading and heading 6 represents the least important heading now one common mistake that i see amongst a lot of people is that they choose these headings based on their size so if they want to have a heading with this size they would just use heading 4. that is not how you're supposed to use headings because the size can always be changed with css it's a matter of styling we should use these headings to create a hierarchy so every web page should have one and only one h1 element this heading represents what this page is all about now nothing happens if you have multiple h1 elements for example i can duplicate this line and say heading 1 plus now look we have two h1 elements but this is going to confuse search engines they're not going to figure out what this page is really all about so every page should have a single h1 element so i'm going to remove this line now after we use h1 then we should use h2 we should not jump to h4 so let's say on this page we're going to have two sections one for html the other for css so my next heading should be h2 and here we can type html obviously below this heading we can have some text so i'm going to say html tutorial our next heading should be h2 so this is the css section and in this section we can have some additional text let's say css tutorial now i'm going to delete these four headings so let's take a look so we have a hierarchy on the top we have an h1 element below that we have two h2 elements now let's say in this section we're going to have two subsections there we should use h3 elements so here's our html section in this section we're going to have two h3 elements let's say code and exercise now take a look so we have a hierarchy this is how we should use these heading elements the better we can represent the structure of our document using html the better search engines can read and understand our content so that's all about text next we're going to talk about displaying special characters in html [Music] some characters are reserved in html and to display them we have to use a special notation for example let's say we want to wrap the word html with angle brackets see what's going to happen so i type a left angle bracket and a right angle bracket see what happened vs code thought we're adding an html element so it automatically generated the closing tag we don't want this so let's delete it now back in the browser look where is our html word it's not here because the browser interpreted this as an html tag this is not what we want we want to display this exactly as this so to solve this problem we're going to use html entities all these entities start with an ampersand and end with a semicolon in between these two characters we type a few characters that determine the type of the html entity so we have an entity for displaying the less than sign that is l t short for less than now let's remove this similarly we have another html entity for displaying the greater than sign so we type an ampersand gt which is short for greater than followed by a semicolon now back to the browser that's exactly what we wanted perfect another common html entity is the copyright symbol so at the end i'm going to type an ampersand copy and a semicolon now take a look here's our copyright symbol beautiful now we have so many editors in html and quite frankly you don't need to memorize any of them in fact you're not going to use 99 of them but in case you're curious let me show you the complete list so on google search for html entities and on this second link dev.w3.org you can see the complete list of news entities so as you can see there are so many entities and honestly i have never used any of them the only ones i have used are these three plus non-breaking space let me show you what that is about so i'm going to do this line and generate some dummy text so we add a paragraph element now to generate some dummy text we type lorem followed by the number of words we want to generate let's say 50. tab look this is some dummy text in latin now let's preview it in the browser so here's what we get let's imagine that the last part on the first line and the first word on the second line should be stick together here we have a line break in between these two words you want to prevent that so i'm going to copy this word now here in vs code let's bring up the search panel by pressing command and f on mac or ctrl and f on windows now we paste this word okay here it is we want to make sure that these two words are always together there is no line breaking between them so i'm going to replace this regular space with a non-breaking space which is an html entity so we type an ampersand nbsp which is short for non-breaking space followed by a semicolon now take a look so both these words are on the second line so this is all about html entities next we're going to talk about links [Music] almost every webpage on the internet has links to other pages or websites to create these links we use the anchor element so we type a that is short for anchor and then press tab now every anchor element should have an href attribute href is short for hypertext reference i know it's a mouthful it basically means a url or a link so for this demo i'm going to create a second page called about.html and then link to it over here so in the explorer panel let's add a new page called about.html now here we're going to create a basic html boilerplate remember how to do that we type an exclamation mark and then press tab that's it beautiful now back to index.html here we can use a relative or an absolute url what do you mean by that well a relative url starts from the current page so currently we are on index.html and we want to go to about.html now currently both these pages are in the same folder so we can type a relative url to about.html like this about html that's a relative url now what if about.html was in a different folder so let's add a new folder to our project called company and then move about to this folder now where is about.html relative to the current page it's inside the company folder right so here we type company slash about.html this is a relative url now let's give this link a text i'm going to say about me so we type our text inside the anchor element okay save the changes back to the browser here's our link click and we're currently on the about page which is empty beautiful now back to our homepage instead of a text we can also use an image so i'm going to delete about me and add an image element so img tab once again here we can type a relative url to our target image so i'm going to go with images mosh.jpg now save take a look obviously this image is way too big we can always use css to resize it but that aside look at the mouse icon when we hover over this image it changed to a hand to indicate that this image is clickable okay now back to our code to keep things simple i'm going to get rid of this image and get back to our text about me now let's go to the about page and add a link back to the home page so over here we're going to add an anchor element what should we type for the href attribute well currently we are inside the company folder we have to go one level up so we can access index.html right to do that we type double periods and a forward slash with this we can go one level up now at this level which is the root of our website we have the company folder the images folder and index.html so we can reference index.html and for the text we're going to say home page again this is another example of a relative url because it starts from the current page and goes somewhere else now if you're inside a deeply nested folder structure we might have to go multiple levels up so double period and a forward slash then we repeat and repeat with this we can go three levels up now as you can see urls like this kind of look messy they look hard to read in those cases we can use an absolute url so we start with a forward slash and this represents the root of our website at this level we have access to index.html so this is an absolute url okay now back to index.html here we are linking to an html document but we can also link to non-html documents like images pdfs powerpoints and so on so let's add a link to my image so for the href i'm going to say images slash mosh.jpg and for the text i'm going to say my photo save take a look so here's our second link click my image is displayed in the browser but what if i want to prompt the user to download it that's very easy we're going to add the download attribute to our anchor element so we type download press enter now this attribute doesn't have a value so we can remove the double quotes and the equal sign so we just add the attribute name now save back to the browser we go back here we have to manually refresh the page because the live server only refreshes the current page now previously we were on my image so that was the url that live server refreshed so here we refresh to get the latest changes now when i click on this link instead of seeing my image we're going to see my image getting downloaded take a look click and here's my image beautiful now we can also link to other parts of this page so let's create two sections with a lot of text so i'm going to add an h2 element and of course i missed the h1 but let's not worry about it for this h2 we're going to say html and below that we're going to add some dummy text with 200 words so paragraph lorem 200 good now right after that we're going to add another h2 for the css section with some more text okay let's save the changes take a look as you can see the css section is below default so we have to scroll down to see what we can do here is on the top we can add a link to the css section so when the user clicks on that they will immediately jump to the css section that is very easy so here's the css section first we have to give this element a unique identifier just like everyone in the real world can have a unique identifier like a driver's license or a password every element on a page can also have a unique identifier so here i'm going to set the id attribute to css or we can use a more descriptive name like section dash css the name doesn't really matter here what matters is that we're defining what is called a fragment or a place on this page now we're going to add a link to this fragment so on the top let's add another anchor element now for the href we're going to type the pound sign followed by the name of our fragment which is section css and for the text we're going to say css now back to the browser take a look i'm going to click on this we immediately jump to the css section beautiful now a lot of websites like this also have a link that helps you jump to the top of the page let's see how we can create that so after the css section i'm going to add another anchor element now for the href i'm going to use an empty fragment so we just type a pound sign without an identifier and then we say jump to top take a look so here's our link click and now we're on top of the page now let's see how we can link to external websites so let's add another anchor element to link to google now what should we type here well google.com is a different website so here we cannot use a relative url we have to use an absolute url but if you start with a forward slash we're referencing the root of our website but in this case we want to go to a different website how can we do that well we have to start with the protocol so https colon to forward slashes google.com now let's type google and test our page click we're on google beautiful now sometimes when linking to external website we want that link to open in a new browser window or a new tab let me show you how to do that so here's our anchor we set the target attribute to underline blank save now back to the homepage once again we have to manually refresh to get the latest changes okay now when i click on google you see a new tab beautiful and one last thing we can also link to emails so i'm going to add an anchor and for href i'm going to say mailto colon programming with mosh gmail.com email me save the changes now back to our page when i click on this link my mail client will open and my email address will be pre-populated take a look so click and here's my mail client so this is all about links now one last thing before we finish this lesson what is the difference between a link and a hyperlink well a link is just an address a url the location of the target page a hyperlink is the element that the user can click on to navigate to that target page that is the difference between a link and a hyperlink but quite often these terms are used interchangeably alright we're done with this lesson next we're going to talk about images [Music] all right now let's talk about embedding images in a bit more detail for this lesson i'm going to grab an image from unsplash.com which is where we can find a lot of beautiful and freely usable images so let's search for coffee there are tons of coffee pictures here i'm going to grab this picture we can download it for free now look this image comes in different sizes small medium and large for now we're going to grab this image in a small size but in the future we're going to talk about embedding images at different sizes depending on the device so on mobile devices we want to serve a smaller image and on desktop computers we want to serve a larger image for now let's not worry about these complexities we'll have a conflict section on this topic later on so let's download the small image now it says say thank you to nathan thanks nathan this is a beautiful picture you have done a great job now i'm going to drag and drop this image onto the images folder and then rename it to coffee we want to give it a descriptive name this is a small search engine optimization tip when we provide descriptive names for our images search engines can better understand and index our pages okay so here's our image now let's add an image element we set the source to images coffee.jpg now what about the alt attribute well i briefly mentioned that we use this attribute to provide textual description of the image it's not compulsory but is highly recommended for a number of reasons the first reason is to make our page accessible to visually impaired people these people use a screen reader to read the web out to them so with this alternative text we can tell them what we are showing on the page and that means we should write a good meaningful description here like a coffee mug on a table don't write something like image or image one that is pointless now the second benefit of providing an alternative text is that we help search engines read this text and understand what we're providing here and there's one more benefit if this image cannot be loaded for some reason the alternative text is shown let me show you what i mean so i'm going to add a typo here now back to the browser look the image is not loaded but we see the alternative text this can also happen if there is a network connectivity issue if the user gets disconnected they can still see the alternative text so let's remove the typo now let's talk about sizing images as i told you before we can use css to resize our images so here in the head section let's add a style element and apply a rule to our image now this rule is applied to all images on the page this is probably not something we want to do in the real world scenario in a real-world scenario we want to apply a class to this element and then define rules for that class we'll talk about this in more detail in the future so for now let's give this image a width of 200 pixels and a height of 200 pixels now there's a tiny problem in our image can you tell our image is kind of squashed here's the reason we're dealing with a rectangular image look this is a rectangular image but we're converting it to a square image now look at the shape of this coffee mug it's kind of round right like compared with what we have over here our image is vertically squashed let me show you another way to verify this we can right click on the image and then go to inspect this opens chrome devtools and selects our image in the dom now on the right side we can see the styles that we applied to this element now i'm going to disable the height property and i want you to pay close attention to the image and see how the shape changes so look now the coffee mug is more round but if i applied the height property it becomes squashed so how can we solve this problem well we have a new property in css called object fit so here we can set object fit to one of these values most of the time we use cover so the image covers its containing box what is this containing box well first let me set this to cover here we have this image element right conceptually there is a box around every element in an html document we don't see this box but the browser uses that box to figure out how the page should be displayed so here we have a box with this dimension 200x200 and in this box we're trying to insert this image right now when we set object fit to cover our image will get resized and potentially cropped so it covers the entire containing box let's verify this so save the changes and back in the browser look our coffee mug is round but if i disable the object fit property it gets squashed again so object fit is a very useful property now we can always play with all possible values over here so i'm going to select this deleted now using the up and down arrows we can go through this list and see the impact of every value now i'm not going to go over all these values and explain what they mean this is pointless you can always figure them out on your own just remember that most of the time we use cover so the image covers the entire containing box alright this is all about the images for now next we're going to talk about video and audio hey guys mosh here i just wanted to let you know that this video you've been watching is the first hour of my ultimate html and css series so after you watch this video if you want to learn more from me you can enroll in the full course which is about 13 hours long and covers everything you need to know to build professional quality websites with html and css it also includes summary notes exercises a real project a certificate of accomplish and you can add your resume and a 30 day money back guarantee to get a refund if you're not satisfied so you have nothing to lose and a lot to learn so if you're interested i put the link in the description box"
    },
    {
        "video_id": "MDLn5-zSQQI",
        "title": "HTML Tutorial For Beginners |HTML In 10 Minutes | HTML Basics For Beginners | Simplilearn",
        "url": "https://www.youtube.com/watch?v=MDLn5-zSQQI",
        "duration": 554,
        "transcript": "hey everyone today's topic is learn HTML in 10 minutes but before we begin if you haven't subscribed to our Channel already make sure to subscribe to our Channel and hit the Bell icon to never miss an update let's begin first we'll go through a quick introduction to basic web architecture to understand how the internet works then we'll understand what exactly HTML is after that we'll have a look at what CSS is then we'll go through JavaScript and in the end we'll create a simple web page using HTML and CSS to gain a better understanding of the HTML tags so without further Ado let's begin now what exactly is the basic web architecture now web architecture is made up of three essential elements ments that's the website that is the front end of a web application that is visible to the user then there is the server which constitutes the back end of a web application and holds and manages all the data and finally there's the IP address that is the address assigned to a website in order to be accessible on the internet first up let's have a look at what website is so your browser starts by loading the main HTML file and then the CSS and JavaScript the user interacts with the website and is not concerned with the back end of an application now secondly we have the server once you've developed your website you'll have to host it on your server to make it accessible on the internet server along with the database contains all the data of a website and facilitates user interaction lastly there's IP address which is the third element of the web architecture now website is hosted on an IP address we put a domain name over that IP address the same way we put names over people's phone numbers when you type a domain name in the browser it will give you the server call the server will then send over the website to you next what is HTML HTML is the most widely used markup language for developing and structuring web pages on the internet it defines the structure of websites and formats these web pages es so what exactly is CSS then now CSS is a simple design language used for making web pages look more beautiful and presentable it can be attached to any HTML element to style it or even position it according to the developer's Choice then you must be wondering what exactly is Javascript now JavaScript is a powerful interpreted language targeted for web development it is used for making web pages interactive and bringing the web pages to life so now let's create your first website now HTML short for hypertext markup language is the coding standard for documents designed for web browsers consisting of a series of elements or tags and which can be used to structure a web page right so these elements can include headings paragraphs uh div containers tables and more HTML tag are nested meaning there are opening and closing tags with the content in between those tags so now let's write a simple HTML code that will help you understand the basics of the language so for this I'm using the text editor that is Visual Studio code you can go ahead and download this text editor from their official website so here I've created a simple HTML file in my vs code and I've added the initial HTML files now let me explain to you uh one by one now Doc type is not so much of a tag but it is more of an instruction now this indicates the browser that the document type to be served to the user is in fact an HTML document now this dock type instruction should always be included at the very top of your HTML page next up you have the HTML tag that is used to contain all the web pages HTML code right so it contains an opening and closing tag with contents in between them the HTML tag can also have attributes now for example there's the Lang attribute allowing you to specify the spoken language of the content of the page followed by the HTML tag there's the head tag now this is the first section of the code that contains all of the information about the web pages properties links and more it could have Pages title description additional meta tags and CSS code so here I've used the title tag and let's give a title say HTML in 10 minutes all right you can also add CSS to the Head tag by using the style tag and change the display styles of HTML elements that are being used the next section is the body tag now the body tag contains all the displayable contents of your web page including headings paragraphs div containers tables and more now the HTML header tags are used to add headings to a web page there are several types of headings available for developers to add to a web page right so first up let's have a look at them I'm going to create a simple H1 heading tag and the message I'm displaying is this is the first heading all right after this I'm going to add a paragraph tag which creates padding in the top and bottom of the element to help separate the text between each paragraph right so I'm going to add a P tag and say this is the paragraph [Music] tag after this let me add a simple h2 tag which is another heading tag and say this is the second heading now you can also add line braks which are helpful from time to time if you want to provide a single line break in your content you can do so by adding the BR tag so here let me just add one for better understanding now the HTML div tag defines a division or a section in an HTML document that is used as a container for other HTML elements now these elements can include content areas sidebars page bars page headers Footers Etc this tag is used to apply styles to HTML elements that cannot be added otherwise we can also make use of the HTML image tag to add images to a web page now these images in a web page are a very common site and they can make the website look more attractive so for that we can use the image tag so let's say IMG within which I mention the source I'm adding the HTML logo so let me just mention that here and then I'm going to provide width for it and then a specific height all right so when you save the file and when you look at the browser you can see that uh the first heading is displayed then your paragraph tag is displayed followed by the second heading and then the image now uh let me show you how you can add styles for some of these uh headings and paragraph tags so here in back my first heading tag let me just say Styles and let me change the font of the content that is being displayed and I'm going to change it to Career new and for my paragraph tag let me display the content in italics so I'll say font style and make it italics so let me save this and when I look at the browser you can see that the font has changed and so has the font style here so now we've covered a few important HTML tags used to develop a web page now there are many other tags available for almost everything you'd want to add to a web page now all of these are available on the internet for you and you can use them in your website so with that we've reached the end of this video I hope you liked it do you think we missed out on anything important let us know in the comment sections below until then keep learning and stay tuned to Simply learn hi there if you like this video subscribe to the simply learn YouTube channel and click here to watch similar videos to ner up and get certified click here"
    },
    {
        "video_id": "bUEykHfMMnc",
        "title": "HTML | Basic Tags #03",
        "url": "https://www.youtube.com/watch?v=bUEykHfMMnc",
        "duration": 954,
        "transcript": "hello guys welcome back I'm YF Shaquille and you are watching HTML tutorials in this video we are going to learn about basic HTML tags so let's get started all right I have opened brackets and I will go ahead and create a new file and I will name it basic tags. HTML and we'll Write the basic HTML so we have the doc type HTML opening and closing HTML tag opening and closing head tag and inside this we have the title tag we'll set the title to basic tags and we have the opening and closing body tag now let us open the live preview We Begin our journey by first creating heading tags now in HTML there are six different types of heading tags H1 H2 H3 till H6 and in most of the cases you will need H1 H2 and H3 so let's create the heading tag tags so the first example is H1 so we'll write heading H1 similarly you can create H2 tags this is like a heading having second priority so H1 having the highest priority then H2 and if you want you can also create h three tags heading H3 and similarly H4 tags H5 tags and it's six tags and if you look at the output you can see H1 tag has a bigger font and H6 heading tag is of smaller font The Heading tags are block elements that is they take up the entire width and they have a new line before and after them so if you consider H1 tag you can see it takes up the entire width similarly h h2 tag H3 tag 4 5 and six the next tag that we are going to talk about is the paragraph tag and as the name suggest it is used to create paragraphs so to create a paragraph tag we use the P character and we can write this is a sample paragraph a paragraph tag is also a block element so if we create a new paragraph This is the second par you can see it takes a new line and occupies the entire with similarly we can create create another paragraph and write some random text like so and you can see this new paragraph is taking the entire width and since it's a block element so it is starting from a new line the next tag is used to create horizontal line and it is called the HR tag so let's say we have two paragraphs and we want to create a horizontal line between the two we'll use the HR tag let me go ahead and copy this so let's say we have two paragraphs this is a sample paragraph and we have another paragraph This is the second par and we want a horizontal line so we'll create the HR tag and you can see we have a horizontal line between the two paragraphs the next tag is the line break tag or the BR tag it is used to make any content after the BR tag start from a new line so for example let's say we create a paragraph this is a sample par paragraph so you can see we have the output this is a sample paragraph now if we move this paragraph word to the next line we can see we still have the same output and this paragraph word is still at the same line now in order to move this paragraph word to the next line we use the BR tag because in HTML even if you add multiple white spaces HTML will still count them as one space so in order to make this paragraph word appear at the next line we use the BR tag and now you can see the word paragraph starts at the next line the next tag that we're going to talk about is called the code tag it is used to display code in our web page so let's say we want to display a JavaScript code in our web page so we'll write code and inside this we can write let's say console.log hello world so you can see we have this output console.log hello world and similarly we can also show another code and let's say this time we are going to write sa our name equal to YF Shaquille so you can see the code tag is not a block element so the next code that we have written V name equal to YF shail it's starts right after the first code so in order to bring the second code element that is the opening code tag the content and the closing code tag after this first code element we'll use the BR tag now you can see the first line of code and the second line of code are now in a separate line the next tag is the pre- tag or pre-formatted tag it is used to preserve the formatting of the document now as I mentioned earlier even if we create multiple spaces between two words or we give multiple new line between two words HTML will still consider them as one character for example if you create a paragraph and we write this you can see the output this is a sample sample paragraph So we have written this is a sample paragraph in three lines but you can see the output is in a single line so in order to preserve the formatting we use the preag so let me go ahead and create a pre- tag and this time if we write this is a sample paragraph now we can see the output is in three separate lines and this sample word is having multiple white spaces before it this is because the pre- tag is preserving this white spaces in the output so in order to make this sample word this one start from the very beginning of the line we have to remove the white spaces before it similarly for the word paragraph now if you look at the output we can see this is a sample paragraph the output in three lines and each starting from the very left without any white spaces before the words and and if you look at the last line you can see we have a empty line this is because the word paragraph ends at the third line but before the closing pre- tag we have this fourth line which consist of white spaces so in order to remove this fourth line we have to remove this white spaces the next tag that I want to talk about is the anchor tag or the a tag it is used to create hyperlinks in the website so for example if you want to create a link to Dy classroom from this basic tags. HTML file we can write dycl classroom.com and we can can give this anchor tag an attribute href and then we can set the HF value to https www. Dy classroom.com so you can see we have this link or the anchor tag and it is pointing at di classroom website so if we click on this it will take us to the Dy classroom website and now let us talk about the image tag or the IMG tag so in order to show image we use the image tag so in this example let me go ahead and create an image tag and this image tag takes an attribute is s RC and the value of SRC attribute is equal to path of the image file in this case I'm going to set the SRC value to Dy classroom logo so I'll past the link of dii classroom image and now if you see the output you can see the logo of Dy classroom website now an interesting thing that we can do with an anchor tag and image tag is to create a clickable image a hyperlink image that is an image which will take us to some other website or another page when clicked now if you look at this image tag it is just a simple image and nothing happens when we click on it now in order to create a hyperlink image all we have to do is create an anchor tag and inside the anchor we create an image tag and we set the HF of the anchor tag to the URL where we want to redirect in this case dycl classroom.com and we set the image Sassi to the image we want to use in this case the logo of Dy classroom so now you can see we have an image tag inside an anchor tag so this image is now clickable it is now a hyperlink image and when we click on it it will take us to dycl classroom.com like so all right guys this brings us to the end of this tutorial I hope you will find this video interesting and if you do please give this video a like and please subscribe my channel because I make new videos every week and guys I'll put the important links in the description the notes of this tutorial is on my website dycl classroom.com the link will be in the description and the code that we are writing in this tutorial series I'll put them in my GitHub repository the link is in the description so please check them out all right guys thank you so much for watching I'll see you in the next video and like always stay happy and keep smiling bye"
    },
    {
        "video_id": "90kC1YLNF3U",
        "title": "Structure of an HTML Page",
        "url": "https://www.youtube.com/watch?v=90kC1YLNF3U",
        "duration": 439,
        "transcript": "hi in this video we'll be talking about the structure of an HTML page so here's an example of a simple web page we see that up in the browser tab this web page has a title it says my first web page and on the actual page we have the phrase hello now suppose we were trying to write the HTML document that creates this web page we have the text my first web page and we have the text hello now how can we tell the browser that we actually want the my first web page text to go up in the browser Tab and we want the hello text to actually appear on the page well it turns out HTML has plenty of tags that help us tell the browser where we want the text to go we have tags that can Define the structure of the HTML page so here is the skeleton for a basic HTML page and there's a lot going on here so let's let's break this down tag by tag and see what each tag is doing so here we have the dock type dock type tells the browser which version of HTML we are using so this tag says that we're using HTML 5 note that this is not an actual HTML tag this is just a comment at the top of the file telling the browser which version of HTML we're using you'll need this at the top of all of your HTML Pages next we have the HTML tag the HTML tag says that everything between the opening and closing tag is our HTML page the HTM HL tag is the container for all other tags our entire page is going to go inside of the HTML tag now we have the head tag the head tag contains important information about the document it contains metadata so metadata is data that describes data so the head is data about the actual page it's not the page itself it's just information about the page there's a few special tags we can include in here specifically we can include the title so the title tag defines the title of the web page this is data about the web page it's describing it this is the title so the title is actually displayed in the top of the web browser inside the the tab down here we have the body tag now the body tag is where the actual content for the document goes the text the images everything on your actual web page it goes inside the body tag this is where most of your HTML tags will go most of the time when you're building a web page it's going to be inside the body tag so there's a few important points to take away from this basic HTML skeleton first is that tags can go inside other tags second is that we use indenting to show the structure of the tags to show which tags are inside of which other tags and lastly the structure of an HTML document can be described as a tree you'll see what I mean by this in a second so first off we see from this basic HTML template that tags can go inside other tags we see that the head tag and the body tag are both inside the HTML tag also we see that the title tag is inside the head tag now every time we have a tag inside of another tag we indent those tags over so everything inside the HTML tag is indented you see that everything inside the head tag is indented one further this helps us see the structure of the web page it helps us see which tags are inside which other tags now we can see that with the layout of these tags the HTML page is actually laid out like a tree at the very root of the tree we have HTML we have the HTML tag now the HTML tag has two children it has two tags that are inside of it and that's the head and the body so the head and body are right next to each other on the tree now inside head we have the title of the page so title goes beneath the head now if we were to start adding things inside the body say we added an H1 tag now the H1 tag is indented over on the document and we see that the H1 tag goes below the body in the tree if we added another H1 tag then they would both be on the same level of this tree so that's what we mean by the tree structure of the HTML document so if we want this HTML document to build this example web page we're going to have to use this HTML structure so first off let's add the HTML tag to let the browser know that everything inside there is HTML but that's done enough the browser doesn't yet know that my first web page has to go in thep top and hello needs to go inside the actual page so to split those up we're going to make the head and the body tags this says hey my first web page should not be displayed on the actual page it is metadata it is information about the page whereas hello that's actually on the page that should be displayed so that's going to go in the body now furthermore inside the head we need to tell the browser what the my first web page is how does that describe the document well it is the title of the document so when we do that we make a new child a new node in this tree and that is the title this tells the web page hey my first web page should be put right there that's where it should be displayed now for the hello we can just leave that hello blank like that we need to tell the browser how to display the hello to do that we put H1 tags around it make that H1 tag and that tells the browser put hello right at the top of the web page make it nice big and bold and lastly we can't forget to add the dock type at the top we need to tell the browser this is HTML 5 this is the version of HTML that we're using so this is the basic structure of an HTML page and this is what we'll need to use from here on out let's see this in the editor so now we're back in the codehs editor and our goal here is to make a full web page with a title and a body we want the title to say my first web page and we want the actual page to say hello world so first I'm going to get rid of that sidebar and this is this is where we'll write our HTML code so let's set up the structure of our HTML page so that the browser knows where to put what text the first thing we need to do is Define the document type so the doc type is HTML now if we go over to sections we can see we have the HTML section the head section and the body section HTML says hey all of this all of this text is HTML head says this is all the metadata for the document and the body holds the actual content of the document so HTML goes right beneath doc type and inside the HTML we want both the head and the body now we want the title of our web page to be my first web page and the title is metadata the title is information about the document so we'll put the title inside the head and say my first web page so now we've set the title for the web page so if you run this we can't actually see anything show up in the content of the page because we've left the body empty but if we see the HTML in a new window we can see that the title worked we've set the title to show up in the browser as my first web page now we need to actually fill in the content of the page so to do that let's make our H1 our H1 tag that says hello world now if we see this in a new window there we go here is our first simple web page it has a title my first web page and it says hello world inside the body now it's your turn"
    },
    {
        "video_id": "bWPMSSsVdPk",
        "title": "Learn HTML in 12 Minutes",
        "url": "https://www.youtube.com/watch?v=bWPMSSsVdPk",
        "duration": 737,
        "transcript": "I don't think this tutorial needs much of an introduction HTML is of course the language used on the internet mainly for the structure and content of websites but used in nearly every website nonetheless I'm going to be using notepad in Windows for this tutorial just to demonstrate how easily you can create an HTML document um hopefully by the end of this tutorial you'll have a good understanding of the structure of HTML you'll not be an expert but you should have um good knowledge of essentially how HTML Works um which you can then build on and progress from there so we've got a blank document here in notepad HTML is made up of tags now a tag is how HTML defines different areas and sections of the document and it's how a web browser would read and interpret the the code essentially so the first tag you need in HTML is simply the HTML tag now most tags in HTML need opening and closing so you see up here we've got the opening HTML tag simply the word HTML in between these symbols and then down here we've got the closing HTML tag which is nearly the same of course as with a forward slash put in there and that's defines a closing tag so everything in this particular HTML file will now go in between these tags so I'm going to use tab to indent the tags within it um it's good practice it makes HTML much easier to read so within the HTML tags we have two sections we have the head section so we have an opening and closing head tag and then the body which so needs an opening and closing body tag so this is simply the the basis and the basic structure of an HTML file so I'm just going to go through some vital tags and some really basic ones that you need to know to start building websites in HTML so in the head section this is where like information about the page would go in the body section this is where the actual content which is displayed to the user would go so we'll start in the head section all we really need up here for now is the title tag now this is the text displayed in a web browser title bar I'm going to just stick in there hello world for example so if we were to save this now must remember to save it as an HTML file you can just change in notepad to save us type to all files and then type. HTML simply as the the file extension so if we were to save that and then open it in a web browser we would get a blank page but it would it should say hello world in the title bar Okay so we've got a blank page but it says hello world up here in the title bar so now we want to add some content to the page so usually the first thing you would want is a title HTML has some handy heading tags we've got H1 which would create the biggest heading a heading in terms of style simply increases the font size and makes it bold so that would be opened and closed just the same as the other tags we've used so far um then after H1 you have H2 H3 H4 H5 and H6 um which get smaller each time so H6 would be the smallest heading you could have so H1 will be the main heading then you'd use H2 as a subheading for example so we're just we're just going to use one for now and stick hello world in there and I I'll keep switching to Internet Explorer so you can see the progress we're making so now we have a heading hello world obvious that's what we've just created there so after the heading you'd want some text potentially and maybe a paragraph of text so we' use the P tag P of course for paragraph This is also opened and then closed with a text inside so we could do that and if we save it refresh the page we get a paragraph of text underneath and because we're using the correct tags The Heading tag and the paragraph tag um the H1 and the P the web browser and HTML automatically set the line spacing the indent everything as we would expect to see it if you wanted another paragraph it would be a simple case of adding more P tags and then if I just do that you'll see there's another paragraph there again with with the line spacing automatically added for us so you're building an HTML web based website you may want an image um so we're going to create an image again I I'm doing all of this from scratch just so you can to hopefully help you understand exactly how it works so if I just create a new image just call it image. BMP of course it's just an empty file at the moment so we can just create an image it it of course it doesn't really matter what's in it because it's the HTML we're working with here so we've got an image we're now going to look at the tag we need to put the image into the web page so this uses the IMG tag but of course an IMG tag alone wouldn't get us much of an image the way this one works it would set properties within the tag itself so we set the the path to the the image file we use SRC for this and then it's equals and open and close quotes and within the quotes we put the path so I can just use a relative path I'm not going to go too much into how relative and absolute paths work but essentially relative path I can simply type image. BMP and since it's in the same folder as this HTML file it will work I could of course go through the full thing by typing like C colon back slash documents or whatever it is in your version of Windows Etc but there's no need since they're in the same folder if it was in kind of an image folder it would be images images. BMP if it was in a folder one level up you use dot do slash to go up a level this is when using relative file paths which is usually much easier so also in the image tag you can set things like width you would do it in the same way you could do it in pixels um you can do it in percent if you don't put those properties in then it it just displays the original size of the image so the image tag doesn't actually have a closing tag because if you think about it we we Define everything about the image within the tag itself so there's if we opened and closed the tag there there's nothing to go inside so what we do we can't just leave it like that so we it's a self closing tag we just put a forward slash at the end of the tag before like essentially closing the opening tag and that makes it open and close all at once so if we save that and go back to our web page we can see that lovely image I just created in paint so it's as simple as that to add an image to a web page using the IMG tag so I'm going to quickly go over a couple more tags that you would use on a regular basis if for example we had another sentence in this paragraph This is my first web page I hope you like it just so you can see what that looks like as you'd expect this is my first web page I hope you like it but what if we wanted that second sentence on the next line yes we could use another paragraph tag and put it in a new paragraph but that's not just the next line that's a couple of lines down if we want to do that we use the break tag for just a line break and that's simply BR now again there's nothing that could go inside of a break so this is another self closing tag now you could just do it like that that would work in HTML but that's probably a better way to do it so if we save that and have a look at the results you can see it just goes onto the next line without leaving any spaces so the final tag I'm going to show you in this tutorial probably not one you'd use loads um the HR tag now this creates a horizontal line across the page so again there's nothing that could go inside a horizontal line so itself closes um it's as simple as that it'll sort out the spacing for us hopefully and we see we get a gray line across so you could use that to separate different sections of a web page so we've created a basic HTML page just to recap we've got the HTML tags which everything else go in and then inside the HTML tag we've got the head and the body tags inside the head tag we put the title tag um which is what displays in the title bar of a web browser and inside the body tag we have the heading the paragraph the horizontal line in this case another paragraph and an image not a fantastic web page but that is the basic structure of HTML this is the kind thing you need to know to start building Advanced websites so hopefully you now understand how tags work you open them and close them um various tags self close or don't need to be closed because they have no end tag of course this web page is not on the Internet it's just on my hard drive or in your case on your hard drive no one else will be able to see it to get it online you'd have to find a web host and upload it there are free ones out there but again I'm I'm not going to cover any more than basic HTML in this tutorial so good luck in creating your first web page and I hope you can then progress to build a full website thanks for watching"
    },
    {
        "video_id": "Yn2r0oFpAFI",
        "title": "Semantic HTML for Improved Accessibility and SEO #html #webdesign #webdev #shorts",
        "url": "https://www.youtube.com/watch?v=Yn2r0oFpAFI",
        "duration": 58,
        "transcript": "in this project we're intentionally using HTML elements that describe the actual purpose of each section for instance instead of relying solely on generic div tags we opt for semantic tags like header nav Main and footer this is called semantic HTML and here's why it matters first there are some accessibility benefits screen readers and other assistive devices can better understand the content when we use descriptive elements this ensures a more inclusive experience for all users by choosing the right tags we convey the structure and hierarchy of our page making it easier for everyone to navigate and second it helps with SEO for similar reasons search engines appreciate semantic HTML when our content is well organized using meaningful tags search algorithms can actually interpret the purpose of each section as a result our pages are more likely to be indexed and ranked appropriately improving our overall visibility"
    },
    {
        "video_id": "EfAGGO1MGq0",
        "title": "&quot;Mastering HTML: Hyperlinks, Page Structure, Semantic HTML - Ep. 2 Part 2&quot;",
        "url": "https://www.youtube.com/watch?v=EfAGGO1MGq0",
        "duration": 3827,
        "transcript": "in this part two of HTML fundamentals we dive deeper into the world of coding from structuring your content with tags to styling elements with CSS will cover it all if you missed part one don't worry check the link in the description and cards below let's Jump Right In and level up your HTML skills one of the fundamental building blocks of the internet are hyperlinks or for short just links so links are what actually enables the internet to be a worldwide web so without links between Pages there would be no web and so let's now learn how to place links on our own web pages now we can place links into two big categories the first category is links dead point to other Pages within our own website so let's say that here in our website the code magazine we had another blog post so we could then create a link from this page to that other page right now on the other hand the other category is links that point to outside of our website so for example if I placed a link to ud.com here on this page then that of course would be a link to the outside of our website right now we do create these two types of links in the exact same way in HTML but there are still uh some kinds of particularities that we need to be aware of and so let's now actually start with the second kind of link that I was describing which point outwards of our own website so what I have here in the demo is that here at the end of uh this part so of this what is HTML section I have a link to the mdn web docs so this is basically a website where you can learn all about HTML and also CSS and JavaScript and actually I will show you this side a little bit better uh in the next section because it's important as a web developer to know how to use and find information here uh in this web documentations page so what we want is to grab the link of that and so to do that just Google mdn which stands for Mozilla developer Network and then just HTML and the exact URL that we're going to use here doesn't really matter all we want is to have some URL that points outside of our own page right so let's just grab this one here which was the first Google result so I'm copying it and again keep in mind that this is called a URL so as you know every single website on the internet has its own URL and so that is what we need in order to create a link to that page okay so let's see yeah we want to put that right here after this unordered list right let's see in the demo uh yeah so right here after the ordered list so that's here so to create a link in HTML we use the a element which stands for anchor so technically a hyperlink or a link is actually called anchor in HTML so it is an anchor element we can close it then we can specify some content and then we can or we have to actually close it so let's start by doing that now as for the content of the link what we specify here is actually the text that we want to be displayed on the page so the text of the link so in this case that is this mdn web docs all right so mdn web docs but now what about the L where we want this link to point to well for that we need to once again use an attribute so in this case it is the H ref attribute then equal double quotes and then we can simply paste that URL that we copied right here and that's actually it so if I give it a save now and then reload our page here then here is our link and you see down there so here in this corner that when I hover it it actually shows me the URL and then when I click it our page goes there great and so that is actually already the basics of creating a link very simple right now we want this uh link here to actually be like inside of this text so inside of one more paragraph here right so let's create that paragraph so you can learn more at and then this link here is basically just a continuation of the text in here so inside of this paragraph so we can finish our sentence here and then close up our paragraph as usual and so now that looks just like uh in the original one right now notice what happens here once again when I click it so you see that we navigated directly to this page and now our own page disappeared so of course we can go back here but sometimes what we want to do is to open a link in a new tab so let me also show you how we can do that and of course we don't always want that so many times we actually want the page to really move to uh the URL that we specified here but also sometimes it's useful to keep the Page open and simply open the URL in a new tab and we can do that by specifying the target attribute then the quotes as always and then this one looks a bit weird so it's underscore and then blank so give that a save and when we reload it will look the same but the behavior should have changed and indeed notice how it opened a new tab and uh or original one is still open great so that worked and so we have now a link that points to a URL that is outside of our own website but now about that first scenario where we want to link to an internal page basically let's do that now and going back again to our demo we have here this example so in the very beginning right after the main heading we have these links here and so these uh are supposed to be links that point to pages that are part of this blog so let's now create this first link here so blog and also create a new page where we can actually link too okay and so creating a new page is as simple as creating a new HTML document so let's open up again our sidebar by clicking here and then we see our Explorer here basically with all the files and then again we create a new file in this icon here and let's call it blog. HTML this time and now we could use this cheat here to create the HTML structure but actually let's practice a little bit here again and if you want you can even pause the video and type it out on your own I will just do it here very fast now so HTML then we need to close it of course now inside of the HTML remember we have uh the head inside of the head we have a title usually and this one let's just call it like this block just uppercase to make it really obvious and you see that this is really just a very Bare Bones structure just ahead with a title and actually the same for the body which remember is the part that is going to be visible uh in the browser so here I will simply specify an H2 element and close it also here and let's call this one blog as well okay ah we still need to close the body of course and that's it let's give it a save and so here we have a very simple very Bare Bones uh block HTML document but now now with that in place we can create a hyperlink or a link uh right here in this index.html which will point to that block. HTML and so the browser will then navigate to that page so let's do it right here after the H1 and so the anchor element then we need the H ref and so now what we do here instead of specifying a URL is to specify the name of the HTML file that we want to go to and so in this case it is of course this blog. HTML that we just created then here as the content of the element let's just write blog again and then close it as always give it a save here is our beautiful link and now watch what happens as I click it bam we are now at blog and you can see that also here in the URL bar so which is now all of this file and so all of this path and then at the end blog. HTML right now to go back we could of course uh click here on this back button but what we could also do is to add a link here which simply points back to index.html right that sounds like a nice idea doesn't it so let's come back here to blog. HTML and as yet another challenge now I want you to actually create this link on your own so pause the video here and create a link that points back to index.html so did you manage to do that or at least try it well I sure hope so but anyway of course we use the a element again then we specify hre and well to go back we just say index Doh HTML and then here we can specify any text which I didn't tell you which one because it doesn't really matter let's just say back to home or something like that give it a save and now once we reload it we have our link we can click it and so now we can basically go back and forth between these two pages because they're now connected through these links so we can go to the blog we can go back and forth and so on and so forth all right so let's close up this one here we don't need it anymore and just to finish we can also actually specify a link that doesn't go anywhere let me show that to you as well so let's just write the content first and here I have challenges I think in the demo so we have challenges flexbox in CSS grid so that's challenges but Watch What Happens now uh when I reload the page like this so you see that it only says challenges but notice how it's just normal text it's not blue and not underlined so it's clearly not a link right so even though it is actually an anchor element but what makes an anchor element really a link is the H ref property and so we really need to specify it otherwise it is not a link at all it is then just an anchor uh which is not really useful now but what if we don't want this to point anywhere as I was saying well the solution to that is to specify this hash symbol right here right so if I now save it and reload then we are back to this being a link actually it just doesn't Point anywhere what happens uh when you click on this link is that basically it goes back to the top of this current page okay and a little bit later in the course we will actually make use uh of this Behavior but for now I just want you to know that this is how we can specify links when we don't have any URL yet for them or don't have any page so basically this is like a placeholder link okay and so let's just copy this here twice there's no need to write it again but of course if you want you can write it again so just for this Flex boox in CSS grid so just to make that navigation look a bit more like complete but all of these links they should not Point anywhere okay and this is how you specify links or hyperlinks or anchors as we can also call them in HTML so this is a really important part of the web as I said in the very beginning and so make sure that you understand how they work and how we place them inside our own web pages so we already learned a couple of very important HTML elements and are already able to create a nice page with some nice functionality as well but now it's time to actually add some structure to our document and to our elements and so let's now learn a couple of new HTML 5 elements for that now when I said that the page is lacking some structure what I meant is that all of these elements that we placed in our document they're all simply like appearing one after another here right they're not really uh like distinguished from one another and especially they're not like grouped together in any logical way and so let's change that by creating some container Elements which will then group these elements together so one of the things that first come to mind is these links here so we have all of these links and this kind of looks like a page navigation here right so a page navigation is usually what we want when we have a couple of links at the top of a page and so what we can do is to specify a special element and then place all the links into that element and the element that I mean is called nef so nef which stands for navigation so just like this and now these need to be indented or they should be at least and so when I give it a save then prier formats this automatically and now these four links are nicely grouped into this container here so into this parent element which is a navigation now the thing is that when we now update our page it does look exactly the same so all that happens here is that this basically created like an invisible box which now contains uh these elements okay so the element on itself doesn't do anything all it does is to group these elements together and I understand that right now it doesn't really seem intuitive or logical to be doing this but trust me once we reach the section where we build some layouts and actually also in the next section just on CSS it will be very important to have all these different parts inside of their own containers all right so looking at our page uh basically this is now the navigation and this here is uh the heading then after that we have all of this here which is basically our uh post so our blog post right so this is kind of different uh than this top part so all of this uh is the blog post again and this is like the top part of our web page so what we can do is to group this navigation and the heading into a header element all right so let's do that so this is another HTML 5 element which is called header and the header basically means the top part of a web document or it can also mean the top part of some smaller unit as we will actually see in a minute and anyway this is uh just an introduction to these HTML 5 elements we will use them even more and I will explain them even more when we build our big website project a little bit later in this course okay so again nothing will have changed visually but now we told the browser like hey all of this year is our web page header so it's the top part of our uh page then all of this as I mentioned before starting here uh is the main part of the page which is in this case a blog post and a very common element that that we can use for a blog post is the article element so this is yet another uh container element but this time it's one for an article and article in this context actually does not uh simply mean a written article like this but it can also be like things from the real world like a computer is an article or a pen or a phone so all of these are articles and if somehow we need a to represent a computer in HTML then article would also be a good element for that okay and so now basically um our body has only two direct child elements we only have a header and we have article which is when we look at our page really all we have so we have the header and we have all of the rest which is our article so that is now nicely placed inside of its own box now one thing that you might ask well if these boxes all of them don't do anything then why don't we call all of them just NV or all of them header or all of them article so this one could also be article and nothing would change on the page right however we don't do that for something called semantic HTML and I will explain briefly what that means in the next video but now continuing even further uh we can actually do some more grp grouping here inside of our article so notice how we have kind of this top part here of the article so basically the heading the author here and also the image so this is kind of the top part of our article and then here we have the content itself right and so once again notice how I said that this is like the top part of the article so just like this here is the top part of the entire web page so what that means is that here again we should use a header element to basically Mark that up and by marking up I mean to basically describe the content in a better way so as I just said inside of the article we want to also have a header so inside of that header there should be um this heading this author image the author name and then here uh this image okay and then closing it now all of this uh is of course a little bit subjective as well so what seems very logical here to me might not be as logical for other developers but I think that what we just did here uh up until this point is quite logical for everyone and makes sense so again this one here is the header part of the article and with this we gave our article a little bit more structure so we have the header and only after that then comes the rest of the content okay so this is looking quite nice already uh but finally if we look at our demo here there's actually one thing missing and in fact there's multiple things so we don't have these related posts yet but we will take care of that later but we also have this part here at the bottom so it's this copyright notice here and this kind of content that comes at the very end of a page is what we usually call the footer and so there's actually as you might have guessed a special element for that as well in HTML 5 so footer and then let's close it also like this and now let's grab actually the text from here oh actually it's not here so we have to just write it manually and now here we have two options so to write the this text we could create a paragraph and then put that text in there or we could actually also write the text right here into this footer okay and this is uh in fact what I will do now so in this case there is just no need here to create yet another paragraph because it's going to be the only child of this footer element here anyway and so there's no need then so copyright and now here you see this uh copyright symbol which I'm sure you know so how do we create that well this is something called an HTML entity so actually this is something new so let me show you quickly how we do that so we write an M perent like this and then in this case I already know the name of the character that I want so I can just start writing copy and so then I can select this one here or I can just write the semi colon and then we're done so this HTML entity here is what represents this see here okay and there are entire tables for HTML entities and I have one on my resources page I think I haven't mentioned that resources page yet but there is a link to it in the very first text lecture in the first section and also uh in the GitHub repository that I showed you in one of the first lectures and there you will find a link to a page which contains all of these HTML entities but anyway we will talk a little bit more about this later in the course anyway the code magazine okay so written in the future give it a save and once again let's reload and as people were expecting uh the visual aspect of the page is still the same as I mentioned in the beginning so these again are just important to group the content into logical Parts which is important for semantic HTML and also for styling with CSS as you will see in the next section and speaking of semantic HTML that is going to be the topic of our next video so I hope to see you there very soon so I mentioned the term semantic HTML a couple of times in this section and so let's now actually uh very quickly Define what I actually mean by semantic HTML so in HTML when we talk about semantic what we mean is that certain elements have actually a meaning or a purpose attached to them so when we think about a certain HTML element we should actually not think about what that element looks like as it's rendered on the page but instead we should think about what that element actually means and what it stands for so that is basically the definition of semantic HTML now not all elements in HTML are semantic and actually I talked a little bit about that before uh here in this element so the strong element which makes our element look bold here on the page so remember how previously I used the uh B element which simply turns its content bolt but doesn't attach it any meaning right so I explained that before and so now maybe it makes a bit more sense so again by using the strong element here uh the text will still look bolt here in the browser but what really matters here is that we now assigned some meaning to this content here we now say that is a strong content which means basically a very important piece of content and the same here uh for this piece so this fundamental word here so again we use uh em for emphasizing this and so it still looks italic here on the web page but what we really mean is that we emphasized this word here so we gave it a special emphasis and uh yeah that's what this element here right now means okay and the same is actually true for all of these elements that we used in the last video so for example here this navigation element all this does is to create a box remember which then contains these four anchor elements but visually it doesn't really do anything all this does is to represent as a meaning that this is a navigation but instead of using nav we could also have used a more generic element which is the div element so for example div open and close it here and again visually nothing will change and so all this did was to create a new box but a box without any meaning so that's what div stands for so back in the day before HTML 5 we always used divs for every single box box that we needed like this on the page but then HTML 5 came around and introduced this concept of semantic HML and so now we should only use the diff element when we don't want to attach a certain meaning uh to a certain container so to a certain like box element on our page so in this case we really want this to mean that it's a navigation and so we use uh the navigation element for that okay and the same is true for the artical the header um the footer that we have down here and in fact it is true even for the paragraph for example because all that this paragraph here and all the other paragraphs really are are essentially boxes filled with text now the P of course does have a semantic meaning it means that it is a paragraph but we could again use a generic box without any meaning so this diff and nothing would change visually okay actually something did change here so we lost some of the wi space that we do have around the P all right so let's put it back here anyway to the P because we want it to have some meaning and of course we also want the spacing that the browser gives this by default around the P elements okay but the idea that I mentioned still holds because we could very easily recreate this space here uh using some CSS later so if we wanted we could in fact build the entire web page only out of div elements if we wanted and then use CSS to style them as we want but of course we don't do that we use semantic HTML to give our elements meaning now you might ask why we actually do that and there are multiple reasons and I think I mentioned uh them already actually so one of them is search engine optimization which basically means that search engines such as Google will be able to understand the structure of your content and therefore they will be better able to analyze what your content and what your web page is all about also writing semantic HTML is extremely important for accessibility and especially for people who rely on screen readers to consume or web pages okay so I hope that this makes sense and we will uh also keep touching on this subject as we go through the rest of the course but I still wanted to make it very clear from the very beginning that when we think about HTML we should not only think about how it actually looks like in the browser but even more about what these elements actually mean and what they stand for and with that being said uh we kind of finished uh all we had to learn in this section and so in the next video we will uh configure vs code a little bit more and then we will move on to two final challenges in this section so don't wait and let's move on to the next lecture here welcome back so we started configuring or vs code editor uh in the very beginning of the course but now at this point we are ready to install three additional extensions that will make our lives a little bit easier as we code HTML and CSS and so let's head over to our extensions panel here and the first extension that I want to install here is called image preview so it's this one and I already have it installed so I just need to click on enable Okay so that's the first one and what this one is uh going to do is that here in our HTML it now displays the small image preview here in this gutter as it's called so here we have this one and then this image here is also right here where we declare it so where we include it in our code and this can be extremely helpful uh sometimes so that's why I really wanted to show you this one um the next one that I want to show you is called color highlighter or highlight so it's this one here and again I I already have it installed I just enable it and actually this one I cannot show you yet what it looks like because it will only be relevant in CSS but trust me that this extension is really really helpful for visualizing colors in CSS next up is an extension called autor rename uh tag so this one and you see it's an extremely popular one uh once again so you have to download it and enable it and then uh what happens here is that uh uh when we change the name of an element let's say we actually wanted to make this one a div then you see it automatically also changes uh the closing one so the closing tag okay and this again is extremely helpful it makes our life writing HTML a bit easier because trust me uh we need to do this all the time like changing the element name okay now another thing that we need to do or at least that we can do if we want is to go back to our settings and then turn back on this setting that we deactivated at the beginning of the section so that's the auto let's spell that right so autoc close tag so let's enable this back because I think at this point you will no longer make the mistake of forgetting a closing tag and so now we can allow vs code to do that work for us so for example if we wanted to write a paragraph here then now you see HTML automatically closed that element for us okay but this we don't need and now we are going to install the most important and the most useful one of all and that is called live server so it's this one here uh live server with almost 12 million downloads and this one is popular for a reason so I just click enable here and so when I go now to my HTML and let's close this one down so close down the sidebar now down here in this bar we should have now this go live button okay so hopefully after installing this live server extension you can also see this button down here uh in this status bar so when I now click this then it's starting and we get this message that server is started at this port number here let's close that and you see that it opened a new tab which contains our page right so basically it looks exactly the same but there is one very big difference so let's let's say we want to change this here and I'm going to call it Jonas's code and now look closely what happens here as I save this file so I hit command s now or control s on Windows and you see what happened it automatically reloaded the page without us having to do anything so all we did was save the code and what will then happen is that this page here gets automatically updated so all the changes that we did here will basically get injected into this page and yeah we can then see the reflection of our changes immediately so I put it back now hit again uh command or contr S to save it and immediately you see it going back to what it was before now if we wanted to stop this connection once we are done developing all we have to do is to click down here on this icon here where it says Port 5500 and by the way this port number is exactly what we have here okay so just for the sake of curiosity this one here means that it's a local host server so basically it's like you have now a web server on your own computer running and then we have uh actually this code running at this port number and so this port it's basically like a sub address of your web server so of the local Local Host server but this doesn't really matter what matters is that this now works and it is really really helpful for our development workflow now if for some reason you could not make this work on your computer then of course don't worry so you can still do it the old way so basically the way we have been doing it all along up until this point so you can just uh open up the file from your uh file system like we did and then keep refreshing it manually right but we right now no longer need this tab here because we now have our live connection so we have our live server uh serving up this page here whenever we do some edits all right and with that we are now ready to tackle our final last two coding challenges in this HTML fundamental section now it's time for the first big coding challenge in in this course so let's get started now before we start with the actual challenge I want to First make some changes to the file structure that we have in this project right now and in particular what I want to do is to put all the images into one folder so that I can then show you how we can include the images like this when they are uh located in a specific folder so right now they are all as we can see here they're all in the same exact same folder as the index.html and so that's why all we have to do uh is to declare the name here and the browser will then find them basically in the same folder as the HTML document but now let's create a new folder by clicking this icon and I'm going to call it IMG and then I'm going to put all of the images there so just dragging and dropping them like this okay and so now if we reload the page and not this one which is our demo but the one we're working on and by the way this time I had to actually manually reload the page uh because uh I had my computer turned off in the meantime and so whenever you do that the very first time you come back you will have to manually reload uh the page here when you are running the live server extension okay so remember that we installed that in the last video and so if I do some change here now then that should probably uh just work just before so you see there's some change and there it appeared but anyway you see that now that we have uh these images inside of the IMG folder they are no longer uh found in the same folder as index.html so that's why they don't appear up here so what we need to do here is to change the path to the image now and that's not a difficult problem all we have to do is to start the new path with the name of the folder so that's IMG and then slash and so here we go so you see the image appears here now again in this Gutter and so let's do the same thing here give it a save and here are our images back okay so usually we always put the images in a separate folder and so I thought that was important to show you especially now before this challenge where we are going to use some more images so about the challenge uh I'm being here back in the demo page and so essentially what I want you to do is to code on your own this part here all right and let me actually show you where that should be in our markup so in our HTML and it is right here after the article okay so this section here about the related posts is no longer part of the article it's also not part of the footer and so here we will need another element and this one I will actually write for you so here we are going to use the aside element and the aside element is usually used for some secondary information that complements the information in the main part of the page so in this case the main part of the page is the article and then the aside which is secondary information is basically some related posts that are related to the article so to the main part okay now visually many times we use the aside element as a sidebar but it doesn't have to be that way okay but now about uh the challenge itself so you see that it starts here with this heading so you can experiment which heading is best here so one of the headings H1 2 3 4 5 and six remember and then uh here you see that this is actually a list right you can see that because of these bullet points and so here for this part you should probably use a list now what we didn't do before was to have multiple elements inside of one list item so up here for example we have the list item and in there there's only some text but you see that here in each item there's an image a link and then uh some more text here and that's no problem at all so inside of each list element there can be multiple other uh child elements right and so with that information I think you are now able to build this now finally just about the images here that's some more information that you need they are also in this folder and they are called related 1 2 and 3 and the dimensions I want you to give them is 75x 75 pixels and now I think I gave you everything so please pause the video now and take a couple of minutes 10 15 minutes maybe to write up the HTML for this section so good luck with that and I see you once you're ready all right so hopefully you did this just just fine so let me show you how I did it and I hope that you uh start to see how helpful it is that vs code now automatically closes uh or or HTML elements right so the source here is in the IMG folder and then related one then the alt text uh let's just say that this is a person programming and of course your alt text doesn't have to be exactly the same as mine so if if your alt text is a bit different that is not a problem at all and now we need to close it as well and so that's uh that's the image part next we have uh a hyperlink so an anchor tag and here the hre which is something that I didn't mention but uh hopefully you figured it out that this is one of the links that should not Point anywhere for now so how to learn web development and now finally there's some text with the author there and so we can use a paragraph for that so by Jonas schetman okay giving it a save now it's nicely formatted and it should appear down here here and indeed here it is great oh I'm just missing here uh The Heading actually so let me go back and put that uh even before the unordered list so I'm using an H4 for that but anyway let's continue now building our list here with the next list item and by the way if you did uh your code a little bit different from mine uh that's that's really not a problem what matters here is that you uh tried writing the code on your own um that is really the most important thing that I was expecting you to do here so with 75 the height also 75 and again a a link pointing nowhere and this one is the unknown powers of CSS and by Jim Dylan and I'm not going to check out the result uh just yet let's just uh finish it so another image so the goal of this part here was really to have you practice writing this same code basically or very similar code over and over again because this is the only way that uh this stuff really gets into your brain so let's call this one JavaScript code on a screen and again the width of 75 and the height of 75 and you notice I'm writing this uh a little bit faster right now because uh we don't want to waste a lot of time writing this repetitive code this was really just for you to practice is aome finally the paragraph give it a save and beautiful so this looks just like in our demo and we have now all this content that we want to display here nicely marked up in a very logical way so you might be wondering why we used a list here in this case and the reason for that is basically the idea behind semantic HTML that I explained a little bit earlier so if we think about these related posts we can very easily argue that it is essentially a list of related posts right and so if it is a list we should Mark it up in our HTML so we should write or HTML as a list and so that's just what we did later with CSS we will then remove these bullet points because they don't make a lot of sense in this context but even with the bullet points removed we still want the meaning uh of this element so of all of this year to be a list but anyway that's enough for this video so I really HED that you completed this Challenge and that you enjoyed doing it even if it took some time and even if you had to review some Concepts from the previous lectures that's completely normal and that's exactly how it should be actually now in order to practice a little bit more even there is another coding challenge coming up which is uh completely detached from this project but it's a really exciting one so I hope to see you there soon time for another exciting coding challenge so that you can keep practicing your new HTML skills and in this one I want you to build this component for this Converse Allstar shoe and I'm saying component here because I want you to imagine this content here in the context of something like an e-commerce store so imagine that we have a shoe store and there are multiple shoes and for each of them there is then like the small component with this description so stuff like the price uh a short description a link and then some product details here now I am building this component so I'm writing this HTML on a special coding platform called codepen.io so this is a place online where we can basically write our code and it will then automatically execute the code and render it and it makes it also easy to share that code now of course you don't need to use codepen in order to complete this challenge you can just go to your code editor and for example add a brand new HTML file here and then uh build all the code in there the reason why I'm not doing that here in the video is because we're actually going to build on this challenge uh later so we will keep developing this very small project over the next few sections and that would then create a mess of different files and a lot of different code uh but of course uh because you're doing it on your own on your own computer it's easier for you and so you can just as I said if you want create a new HTML file and do it here but on the other hand I think it's also helpful and useful for you to learn a little bit about codepen.io and uh create the challenge there so let me just give you a very quick demonstration of codepen so just Google codepen I would say or you can go to codepen.io and then all you have to do is to click here on start coding now maybe in the future uh something has changed about code pen so about this interface but you will always be able to create a new code pen simply by going to codepen.io pen so just like this so here we basically have a panel where we can write HTML uh CSS and JavaScript if we want or we can also just uh collapse these panels if we don't need them which is the case right now and so here we can write our HTML let's just write an H1 element hello world for example and you see that here we have to again manually uh close the element but anyway you see that after some time it then renders the results down here so in this results panel basically you can also change the name of your code pen so let's say uh challenge to which is the name of this lecture okay and then you can uh also save it now to save it you will have to create a free account but I would say that it's actually worthwhile uh to do so but of course uh it's optional and you're not forced to create a new account here but if you do that is actually very helpful because then you will get a special URL for each code pen and then you can share that code pen with others so if you want to just like create uh a quick example a quick demo of something to show it to someone then you can just come to codepen uh create it right here and then copy paste the URL from here once you have saved it and by the way what I just described is actually also the best way of sharing code in the Q&A section on UD in case you run into any problems okay so again it would probably be a good idea to create an account here uh because it's just useful and many many programmers use codepen it's a very popular tool but anyway going back now to the challenge let me give you a couple of hints okay so this is what the result looks like that I want you to build but uh to help you a little bit I will actually need to change your bit of the code so here in change view we can uh now switch to the editor view which will then look what just like what I showed you before all right so now we have the editors here on top and then the result down here so there are some things I need to explain uh before you can get started so first of all I want you to wrap all of this content inside an article element and remember how I mentioned that an article element can not only be used for something like a written blog Post article but also for like really a physical article and so a shoe like this is a perfect example for that so this is an article and again coming back to the example of having like uh an e-commerce store then each shoe would be a different article and so you would have one article element for yeah for each of the shoes right then uh down here there is an element that we have never used which is this clickable button and so down here you see that this is simply the button element and so you can just go ahead and use that and then finally there's something uh else which is this symbol here so this Arrow here now remember how uh back in our project so here I mentioned that this symbol right here this Copyright symbol is an HTML entity right remember that and so this Arrow here is just another HTML entity and I also mentioned back then that there is a very handy list on my resources page which is this one now if you're watching this in the future then this page probably looks uh quite different but for now this is what I have and um the HTML entity reference that I meant so that I mentioned earlier is this one so let's just open it up actually and then there is a lot of stuff that you can use so all of these different symbols and here for example is the copy uh symbol that we used before in vs code now this is a huge list and I'm just going to use a command or contr F to search uh on the page for arrows and here we go so there are all these different arrows here and the one that I used is this so to insert this Arrow into your own HTML code all you have to do is to write this HTML entity okay and yeah I will leave this oh well actually we don't need it anymore right oh and just one more thing which is the image so you cannot really upload images to codepen unless you have a paid account but that doesn't make sense I think and so I actually uploaded the image for you onto this URL so you see that this is actually another way of including images so essentially an image that is coming from a certain URL so in contrast uh right here when we wrote Our Cod before then the source was always an image on our own computer so in this case in the image folder and then this image name and if you're building this Challenge on your own computer then you can just use this challenge image here so it's exactly the same okay but if you're building it on codepen like I'm going to do then you will need this image that is located at this URL so just copy this here somehow from the screen and use it for your own project then the dimensions of the image should be 250 by 250 and with this I think I gave you everything that you need to know so go ahead and copy this URL and now I will switch to the full page view so that you can see everything at once and now uh I will just leave you to it and come back here in 5 or 10 minutes once you are ready okay here we are back and I I hope that it wasn't too much of a challenge for you so that it wasn't too hard so hopefully you got to practice your skills a little bit more and so now in case you have any doubt or you run into any problem I will now show you my solution here so as I mentioned we are using an article here and now for the heading I used an H2 actually not an H1 because of that idea of this being a component with within a bigger page okay and so each page should only have one H1 and so if we then have multiple articles then each of them should just be an H2 Converse Chuck Taylor All Star well I could have just copied this from the uh demo but anyway so IMG and now I will actually go ahead and copy this URL here in the editor view okay then the alt text is just copying it now here oh this should be enough like this and then the height and the width and 250 and here it is here is our image great now let's go back here and actually copy all of this content why not then we can just uh after that wrap everything into its own element so here we have the price and I will keep using a paragraph uh for each of these elements so for each of the text elements then we have free shipping okay oh and you see that uh code pen actually automatically did some indentation there so that's quite helpful then here there is another uh another paragraph right so we are getting our content formatted except of course for all the content that is not inside any element so remember how I mentioned that uh HTML doesn't care about any spacing or about any enters so like line breaks everything is just in the same line and so that's why we need to structure our content in a logical way now here we have that anchor element and actually I didn't really tell you where this link should point to so you could have just created an empty link like this basically or you could have linked the Converse website so let me just grab that link so converse.com probably and I'm doing it like this you will see in a moment why and the reason is because we actually need this https colon SL slash so the entire URL this is not necessary here and now here let's uh close this and here of course we do not just want this symbol because this is not really correct so instead we want that HTML entity that you hopefully used so that is the right arrow so this is the abbreviation here for R stands for right and then R for Arrow and so indeed this is the result that we got okay so we have all of this part now let's take care of uh this list here and this heading and finally then also this button so I have an H2 already up here right and so for this one I'm using uh an H3 now H3 and closing it nice and now remember uh in order to create a list which is what we want here so a bullet pointed list we use the unordered element or actually the unordered list element and now we just wrap all of these into one Li element right so I hope that at this point uh you already know these elements so you you have practiced a lot and so I'm sure that uh this is getting a lot more easy for you now let's just remove this dot here and we are almost done so all we need now is that button in the end and so as I showed you before for that we can simply use the button element in HTML so add to card and of course that button so clicking that button will not do anything thing for that we would need some JavaScript but at least it is here visible okay and we see here that we have 80 unsaved changes so if you want to preserve those changes again you would have to save the code pen uh and create a free account in order to do that oh and I thought that we were actually done uh with this challenge but there is one small piece missing so this text here uh in the original is actually bold so that's the only difference so that's something that we're missing and so let's simply uh wrap this value here so all this text into a strong element not string strong and you see now at this point we didn't close uh this tag so this strong element and so now all the rest of the content basically became strong so everything is Bolt now because this element never ends but of course uh that would be a mistake wouldn't even be valid HTML but the browsers somehow uh still are able to render it somehow but anyway with this we finished this Challenge and actually also the introduction to HTML section so make sure to review everything that you just learned in the section all your new skills and then once you're ready uh we can together move on to or next section which will be the fundamentals of CSS and so there you will finally learn how to actually style your content and make it look a little bit more polished and more beautiful so that's really really exciting and so yeah once you ready let's move on there see you soon"
    },
    {
        "video_id": "Z4moxjE-NB0",
        "title": "Locofy.ai | Generating code with Semantic Tags [Doc]",
        "url": "https://www.youtube.com/watch?v=Z4moxjE-NB0",
        "duration": 77,
        "transcript": "in this video you'll learn how to use locofi to generate code with semantic HTML tags using semantic HTML tags makes your code easy to read and understand it also helps to make your content more accessible and SEO friendly with local fire you can generate semantic tags for containers and text for containers simply select your frame on figma then select the container tag on the plugin you can now choose the appropriate semantic tag in this case this is a header here's another example where we tag the footer using the footer tag you can also assign semantic tags for text simply select the text layer in figma then choose the text tag on the plugin you can then select the semantic tag you want to use this is a top level header so you can use H1 and you can then proceed to tag your other text layers accordingly [Music]"
    },
    {
        "video_id": "l5_g2_D4N-g",
        "title": "#20  HTML5 Forms - (Tamil)(Tutorial) | HTML5 Course",
        "url": "https://www.youtube.com/watch?v=l5_g2_D4N-g",
        "duration": 571,
        "transcript": "hi friends wanna come and parent so unique individual Manappuram Dina HTML file reforms so formula take a look HTML format bitter cocoa for example in cybernetic sort of a you know the quantity especially poor part you know your name email subject message align like using some tape or longer I bunny did send message is promoted in a diaper informational I mean several email up oh he's done formal of working so uniquely in the foreman by a Bigfoot hunters over Paco Paco you know the text editor plop oh you didn't I already creep on her for month and jelly pentagram I put a fresh bunny pokémon he may let you put on upon open up inner HTML file form Capon opera if it's gonna tack open one India close my dad actually different ahem solar Allah Allah - Allah so for makka pakka to attribute through bone attribution and patina and the form Tarragona options Maricha coma for example in the form ok its transformation running stops running senton of Purina under active with which miss Pawnee flow for example action if it would type of attribute formula urban area type Sirica number future Lopakhin action the loop any clear so from save money take refresh contract given is Paola and a number and the for imported one of um clean the input number of photons will be amazed me poor Allah so in the video tournament up on a farm veena is a protocol all of an opera your name your email subject in message is an amount of her own first of all named Leia so input given in the kana element 1 the input element input your imaginary elected being a mother taxon imparting now was the opening our crossing down on uh input tag lopatina input element allopathy na hoku opening mother for Anna live on this single tag single element so long he went from masala opener is closer it's a lot fat tax too long I had tags now open Anna are the clothes all on a single tag now open Madonna was close close a panatela html5 an autumn because when Allison funny con roses so if nominee input type equal to text Sarah so hindered input to karna name he did not name that I'm Dean our information mercy upon a simple numbers it tracks work on a movie in the nation are the car name of Malala named lamb blindness in paraná hidden information of the three other so I'll Ghanim name thiruporur for example is only name next place holder no no other tonight because a ponytail refresh mini park along say Papa Tina put a blank our input my little clear text number let my freak Bunnicula Anna I kept our teen finishing order for am and I even tell Connie to pick up a date night you were named another case when I named a punter and I in departing up Blaine nautical in anti-porn interrelate so remain upon a poem Deena place holder tutorial attribute okay place older anapana bina on the word Mari a meaning and the type and reward Levante this fear hint message Markham for example your name your name depending arena displacement Oh Moses oh no Rajesh mrs. Ahmad your name Kimiko so in getting my name de película de mañana para para marina he made subject and message and I crave no para so a break that creep on a crack break like Eric Turner already Sona marry break tacna or a element I want a new kind Acosta Ludo so you plan only input element ki Poneke ran other one text alert was it type text our poses name one day email placeholder one the email at you Kamakura he's a contending and the backward slash water table it built a lot and I assume I finally the automatically understood Panico to say bonito fish hunter in kappa denied email Arianna in a random and he reported only except for no so use a filter political html5 level in pallida new type work input let it percolate on personal email so depending upon their summing for Nomos it yeah the email a ballot panic on for example at gmail.com calm when the rather when the actor not common that was valued for no yeah now I don't care I to show for now number they pose subjugate proper on it might input text name subject so place would've under some subject to be imported on next to finally I'm not gonna veena your message letting him die prop or all the cognize from a piranha different turn out the element very quick I love it text area and so longer text area I want the patina symbol decree as a away pad tag Allah for no I want a closer so texted I can name from the law it according to type table you know Exeter one is our name on the message so you can place water port o'clock enter your message so say upon anita expand attack both inna EG hammer lab you can have great technologies for lips so this particular single break tag is pentagram break tag in the break tag so somewhat element pakka vodka Donna is just a ship from the coast Levin did not be stable for your desk structure the fog of our own necks eco-silver numbers other styling Alan Apotheker no you're not want the end yet Allah input la magie 10 Anna I get a tick-borne a semitone Ola so now I can upon oh no summit but net overall no other kernels index one they are the input element left type of on the evening after Semitic put in there the submitter Mozart a medium would submit button or Rojo and sorry but three phenomena automatic down below and a moose elk with caliber Oh Anna if there's not a la partie nabina default a typical stomach body now will cover or submit no room are now only different on a word we're known anything in a value other on the different for example registered no mean for Amina let's end on Paula said no but refresh button Athena send down Tex or oh so default outlet expert in a submit desirable a lot type video so even I want the informations on type enira now send now click for na young the poem I'm business persuade upon allah azza cara the farmer will attributes other options for example action data ones it is in for no action so for example allowing the deep is Larry direct for no Britnie in the hash table server even they enough for not be night in the link Americas it link coded dummy link hash is known for Mordor recover mandatory on attributes patina one action no no one the method method Nana in opening information to English an informational video and for no so HTTP POST a reco render value and I'm going the information net transfer pond o'clock 101 they get post can get requests so longer sorry get post career I get Rico so longer second when the person a post request along other in frame with other digital map ocula if I want a method one day if I mentioned don't panic right okay ba pretty meta table refresh money guetta & n N Furter say no your buddy not including I tell of the autumn thing I got it particularly so even Tanisha undervalued panic long yep Athena by default our URL about the Yuna name equal to and we'll e-mail from a subject and message if no row is the N and patina simple you know the input term and order name on the name so he D one day by default turning he met that specify panel Abdi now I'm going to get request information transfer so you don't get Rick was there so name email Adi Lanka come up on either one time they log in putting abena a little cooler isn't English Bonavena sadhana adjusted cuz they they use for La Motta body blog initiation abandoning a post request Obispo no no so you problem and a method when they post a believer cousin backlog so post patron or refresh pond wrong so he put on the a name email a lamp or rambling ah today my partners in the freshman together in the parameter long independent a refresh money grant so we paid you on the sleep and a pagina send out an owner ought to be a systematize it yes I mean is Sabina numbers when they required field element of a Borella required field when they html5 order new one attribute so HTML file D'Amato it's required type ending Abdullah over reform submit bottom Jose Yuma candy pile the for mo kio really terrible other required a attribute functionality for example in the Parana now when the unis I'm gonna type upon Allah say no click wanna move please fill out this funeral so required a poor uniform which is looking at it lucky that one we end up on IANA v9 Ingrid field virtue coma his flower community so you some basica palm tag or a functionality so next you will own the nominee for arena input elements party Park of all input layer in a antenna type of elements a Louisville Janet Iroquois Kokoro so natural upper clamp I"
    }
]